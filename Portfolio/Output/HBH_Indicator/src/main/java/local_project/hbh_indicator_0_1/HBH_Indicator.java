// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.hbh_indicator_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: HBH_Indicator Purpose: Creation of Indicator<br>
 * Description: To create a dataset that has an indicator for whether a patient received appropriate treatment for gonorrhea and/or chlamydia. <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class HBH_Indicator implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "HBH_Indicator";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HBH_Indicator.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HBH_Indicator.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_3_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_3_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_3_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_2_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_2_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_2_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_7_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_7_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_7_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
row21Struct row21 = new row21Struct();
row22Struct row22 = new row22Struct();





	
	/**
	 * [tFileOutputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_5", false);
		start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row21" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_5 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_5().limitLog4jByte();


		int columnIndex_tFileOutputExcel_5 = 0;
		
		String fileName_tFileOutputExcel_5="C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Temp_Chlamydia_Drug_Indicator.xlsx";
		int nb_line_tFileOutputExcel_5 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_5.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_5.setAppend(false,false);
		xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_5.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);
		
		xlsxTool_tFileOutputExcel_5.setFont("");
		
		if (xlsxTool_tFileOutputExcel_5.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_5.addRow();
		
		xlsxTool_tFileOutputExcel_5.addCellValue("patientid1");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("visit_date");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("chlamydia_result");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("drug_description");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("drug_date");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("gpi");
		
		nb_line_tFileOutputExcel_5++; 
		
	}
		

 



/**
 * [tFileOutputExcel_5 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_6", false);
		start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row22" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_6 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_6().limitLog4jByte();


		int columnIndex_tFileOutputExcel_6 = 0;
		
		String fileName_tFileOutputExcel_6="C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Temp_Gonorrhea_Drug_Indicator.xlsx";
		int nb_line_tFileOutputExcel_6 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_6.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_6.setAppend(false,false);
		xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_6.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);
		
		xlsxTool_tFileOutputExcel_6.setFont("");
		
		if (xlsxTool_tFileOutputExcel_6.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_6.addRow();
		
		xlsxTool_tFileOutputExcel_6.addCellValue("patientid1");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("visit_date");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("gonorrhea_result");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("drug_description");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("drug_date");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("gpi");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("errorMessage");
		
		nb_line_tFileOutputExcel_6++; 
		
	}
		

 



/**
 * [tFileOutputExcel_6 begin ] stop
 */



	
	/**
	 * [tFilterRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_6", false);
		start_Hash.put("tFilterRow_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_6 = 0;
		
    	class BytesLimit65535_tFilterRow_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_6().limitLog4jByte();
    int nb_line_tFilterRow_6 = 0;
    int nb_line_ok_tFilterRow_6 = 0;
    int nb_line_reject_tFilterRow_6 = 0;

    class Operator_tFilterRow_6 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_6(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_6 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_9", false);
		start_Hash.put("tFileInputExcel_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_9";

	
		int tos_count_tFileInputExcel_9 = 0;
		
    	class BytesLimit65535_tFileInputExcel_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_9().limitLog4jByte();


			class RegexUtil_tFileInputExcel_9 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_9 regexUtil_tFileInputExcel_9 = new RegexUtil_tFileInputExcel_9();

		Object source_tFileInputExcel_9 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Lookup_Drugs_Present_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_9 = null;

		if(source_tFileInputExcel_9 instanceof String){
			workbook_tFileInputExcel_9 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_9);
		} else if(source_tFileInputExcel_9 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_9 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_9);
		} else{
			workbook_tFileInputExcel_9 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_9 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_9 : workbook_tFileInputExcel_9){
   			sheetList_tFileInputExcel_9.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_9);
    	}
    	if(sheetList_tFileInputExcel_9.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_9 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_9 : sheetList_tFileInputExcel_9) {
			if(sheet_FilterNull_tFileInputExcel_9!=null && sheetList_FilterNull_tFileInputExcel_9.iterator()!=null && sheet_FilterNull_tFileInputExcel_9.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_9.add(sheet_FilterNull_tFileInputExcel_9);
			}
		}
		sheetList_tFileInputExcel_9 = sheetList_FilterNull_tFileInputExcel_9;
	if(sheetList_tFileInputExcel_9.size()>0){
		int nb_line_tFileInputExcel_9 = 0;

        int begin_line_tFileInputExcel_9 = 0;

        int footer_input_tFileInputExcel_9 = 0;

        int end_line_tFileInputExcel_9=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_9:sheetList_tFileInputExcel_9){
			end_line_tFileInputExcel_9+=(sheet_tFileInputExcel_9.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_9 -= footer_input_tFileInputExcel_9;
        int limit_tFileInputExcel_9 = -1;
        int start_column_tFileInputExcel_9 = 1-1;
        int end_column_tFileInputExcel_9 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_9 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_9 = sheetList_tFileInputExcel_9.get(0);
        int rowCount_tFileInputExcel_9 = 0;
        int sheetIndex_tFileInputExcel_9 = 0;
        int currentRows_tFileInputExcel_9 = (sheetList_tFileInputExcel_9.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_9 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_9 = df_tFileInputExcel_9.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_9 = begin_line_tFileInputExcel_9; i_tFileInputExcel_9 < end_line_tFileInputExcel_9; i_tFileInputExcel_9++){

        	int emptyColumnCount_tFileInputExcel_9 = 0;

        	if (limit_tFileInputExcel_9 != -1 && nb_line_tFileInputExcel_9 >= limit_tFileInputExcel_9) {
        		break;
        	}

            while (i_tFileInputExcel_9 >= rowCount_tFileInputExcel_9 + currentRows_tFileInputExcel_9) {
                rowCount_tFileInputExcel_9 += currentRows_tFileInputExcel_9;
                sheet_tFileInputExcel_9 = sheetList_tFileInputExcel_9.get(++sheetIndex_tFileInputExcel_9);
                currentRows_tFileInputExcel_9 = (sheet_tFileInputExcel_9.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_9_CURRENT_SHEET",sheet_tFileInputExcel_9.getSheetName());
            if (rowCount_tFileInputExcel_9 <= i_tFileInputExcel_9) {
                row_tFileInputExcel_9 = sheet_tFileInputExcel_9.getRow(i_tFileInputExcel_9 - rowCount_tFileInputExcel_9);
            }
		    row20 = null;
					int tempRowLength_tFileInputExcel_9 = 7;
				
				int columnIndex_tFileInputExcel_9 = 0;
			
			String[] temp_row_tFileInputExcel_9 = new String[tempRowLength_tFileInputExcel_9];
			int excel_end_column_tFileInputExcel_9;
			if(row_tFileInputExcel_9==null){
				excel_end_column_tFileInputExcel_9=0;
			}else{
				excel_end_column_tFileInputExcel_9=row_tFileInputExcel_9.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_9;
			if(end_column_tFileInputExcel_9 == -1){
				actual_end_column_tFileInputExcel_9 = excel_end_column_tFileInputExcel_9;
			}
			else{
				actual_end_column_tFileInputExcel_9 = end_column_tFileInputExcel_9 >	excel_end_column_tFileInputExcel_9 ? excel_end_column_tFileInputExcel_9 : end_column_tFileInputExcel_9;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_9 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_9;i++){
				if(i + start_column_tFileInputExcel_9 < actual_end_column_tFileInputExcel_9){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_9 = row_tFileInputExcel_9.getCell(i + start_column_tFileInputExcel_9);
					if(cell_tFileInputExcel_9!=null){
					switch (cell_tFileInputExcel_9.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_9[i] = cell_tFileInputExcel_9.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_9)) {
									temp_row_tFileInputExcel_9[i] =cell_tFileInputExcel_9.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_9[i] = df_tFileInputExcel_9.format(cell_tFileInputExcel_9.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_9[i] =String.valueOf(cell_tFileInputExcel_9.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_9.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_9[i] = cell_tFileInputExcel_9.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_9)) {
											temp_row_tFileInputExcel_9[i] =cell_tFileInputExcel_9.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_9 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_9.getNumericCellValue());
										temp_row_tFileInputExcel_9[i] = ne_tFileInputExcel_9.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_9[i] =String.valueOf(cell_tFileInputExcel_9.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_9[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_9[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_9[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_9[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_9 = false;
			row20 = new row20Struct();
			int curColNum_tFileInputExcel_9 = -1;
			String curColName_tFileInputExcel_9 = "";
			try{
							columnIndex_tFileInputExcel_9 = 0;
						
			if( temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
				curColNum_tFileInputExcel_9=columnIndex_tFileInputExcel_9 + start_column_tFileInputExcel_9 + 1;
				curColName_tFileInputExcel_9 = "patientid1";

				row20.patientid1 = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
			}else{
				row20.patientid1 = null;
				emptyColumnCount_tFileInputExcel_9++;
			}
							columnIndex_tFileInputExcel_9 = 1;
						
			if( temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
				curColNum_tFileInputExcel_9=columnIndex_tFileInputExcel_9 + start_column_tFileInputExcel_9 + 1;
				curColName_tFileInputExcel_9 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_9){
					try{
						if(row_tFileInputExcel_9.getCell(columnIndex_tFileInputExcel_9+ start_column_tFileInputExcel_9).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_9.getCell(columnIndex_tFileInputExcel_9+ start_column_tFileInputExcel_9))){
							row20.visit_date = row_tFileInputExcel_9.getCell(columnIndex_tFileInputExcel_9+ start_column_tFileInputExcel_9).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_9 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_9.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_9.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_9+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_9 + " )");
                            }else{
                                row20.visit_date = tempDate_tFileInputExcel_9;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_9+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_9 + " )");
					}
				}

			}else{
				row20.visit_date = null;
				emptyColumnCount_tFileInputExcel_9++;
			}
							columnIndex_tFileInputExcel_9 = 2;
						
			if( temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
				curColNum_tFileInputExcel_9=columnIndex_tFileInputExcel_9 + start_column_tFileInputExcel_9 + 1;
				curColName_tFileInputExcel_9 = "chlamydia_result";

				row20.chlamydia_result = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
			}else{
				row20.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_9++;
			}
							columnIndex_tFileInputExcel_9 = 3;
						
			if( temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
				curColNum_tFileInputExcel_9=columnIndex_tFileInputExcel_9 + start_column_tFileInputExcel_9 + 1;
				curColName_tFileInputExcel_9 = "gonorrhea_result";

				row20.gonorrhea_result = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
			}else{
				row20.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_9++;
			}
							columnIndex_tFileInputExcel_9 = 4;
						
			if( temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
				curColNum_tFileInputExcel_9=columnIndex_tFileInputExcel_9 + start_column_tFileInputExcel_9 + 1;
				curColName_tFileInputExcel_9 = "drug_description";

				row20.drug_description = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
			}else{
				row20.drug_description = null;
				emptyColumnCount_tFileInputExcel_9++;
			}
							columnIndex_tFileInputExcel_9 = 5;
						
			if( temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
				curColNum_tFileInputExcel_9=columnIndex_tFileInputExcel_9 + start_column_tFileInputExcel_9 + 1;
				curColName_tFileInputExcel_9 = "drug_date";

				if(5<actual_end_column_tFileInputExcel_9){
					try{
						if(row_tFileInputExcel_9.getCell(columnIndex_tFileInputExcel_9+ start_column_tFileInputExcel_9).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_9.getCell(columnIndex_tFileInputExcel_9+ start_column_tFileInputExcel_9))){
							row20.drug_date = row_tFileInputExcel_9.getCell(columnIndex_tFileInputExcel_9+ start_column_tFileInputExcel_9).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_9 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_9.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_9.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_9+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_9 + " )");
                            }else{
                                row20.drug_date = tempDate_tFileInputExcel_9;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_9+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_9 + " )");
					}
				}

			}else{
				row20.drug_date = null;
				emptyColumnCount_tFileInputExcel_9++;
			}
							columnIndex_tFileInputExcel_9 = 6;
						
			if( temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
				curColNum_tFileInputExcel_9=columnIndex_tFileInputExcel_9 + start_column_tFileInputExcel_9 + 1;
				curColName_tFileInputExcel_9 = "gpi";

				row20.gpi = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
			}else{
				row20.gpi = null;
				emptyColumnCount_tFileInputExcel_9++;
			}

				nb_line_tFileInputExcel_9++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_9 = true;
					 System.err.println(e.getMessage());
					 row20 = null;
			}


		



 



/**
 * [tFileInputExcel_9 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_9";

	

 


	tos_count_tFileInputExcel_9++;

/**
 * [tFileInputExcel_9 main ] stop
 */
// Start of branch "row20"
if(row20 != null) { 
			row22 = null;



	
	/**
	 * [tFilterRow_6 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		

          row22 = null;
          row21 = null;
    Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("||");    
        ope_tFilterRow_6.matches((row20.chlamydia_result == null? false : row20.chlamydia_result.toUpperCase().compareTo("POSITIVE") == 0)
                       , " chlamydia_result.toUpperCase().compareTo(\"POSITIVE\") == 0 failed");    
        ope_tFilterRow_6.matches((row20.chlamydia_result == null? false : row20.chlamydia_result.toUpperCase().compareTo("DETECTED") == 0)
                       , " chlamydia_result.toUpperCase().compareTo(\"DETECTED\") == 0 failed");
    
    if (ope_tFilterRow_6.getMatchFlag()) {
              if(row21 == null){ 
                row21 = new row21Struct();
              }
               row21.patientid1 = row20.patientid1;
               row21.visit_date = row20.visit_date;
               row21.chlamydia_result = row20.chlamydia_result;
               row21.gonorrhea_result = row20.gonorrhea_result;
               row21.drug_description = row20.drug_description;
               row21.drug_date = row20.drug_date;
               row21.gpi = row20.gpi;    
      nb_line_ok_tFilterRow_6++;
    } else {
            if (row22 == null){
              row22 = new row22Struct();
            }
                row22.patientid1 = row20.patientid1;
                row22.visit_date = row20.visit_date;
                row22.chlamydia_result = row20.chlamydia_result;
                row22.gonorrhea_result = row20.gonorrhea_result;
                row22.drug_description = row20.drug_description;
                row22.drug_date = row20.drug_date;
                row22.gpi = row20.gpi;
	            row22.errorMessage = ope_tFilterRow_6.getErrorMsg();
      nb_line_reject_tFilterRow_6++;
    }

nb_line_tFilterRow_6++;

 


	tos_count_tFilterRow_6++;

/**
 * [tFilterRow_6 main ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tFileOutputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

			//row21
			//row21


			
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_5.addRow();
									   				
	    				if(row21.patientid1 != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row21.patientid1));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row21.visit_date != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(row21.visit_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row21.chlamydia_result != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row21.chlamydia_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row21.drug_description != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row21.drug_description));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row21.drug_date != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(row21.drug_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row21.gpi != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row21.gpi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_5++;
				
 


	tos_count_tFileOutputExcel_5++;

/**
 * [tFileOutputExcel_5 main ] stop
 */

} // End of branch "row21"




// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tFileOutputExcel_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

			//row22
			//row22


			
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_6.addRow();
									   				
	    				if(row22.patientid1 != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.patientid1));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.visit_date != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(row22.visit_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.gonorrhea_result != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.gonorrhea_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.drug_description != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.drug_description));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.drug_date != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(row22.drug_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.gpi != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.gpi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row22.errorMessage != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row22.errorMessage));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_6++;
				
 


	tos_count_tFileOutputExcel_6++;

/**
 * [tFileOutputExcel_6 main ] stop
 */

} // End of branch "row22"





} // End of branch "row20"




	
	/**
	 * [tFileInputExcel_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_9";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_9_NB_LINE",nb_line_tFileInputExcel_9);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_9 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_9.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_9", true);
end_Hash.put("tFileInputExcel_9", System.currentTimeMillis());




/**
 * [tFileInputExcel_9 end ] stop
 */

	
	/**
	 * [tFilterRow_6 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
    globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_6", true);
end_Hash.put("tFilterRow_6", System.currentTimeMillis());




/**
 * [tFilterRow_6 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

							columnIndex_tFileOutputExcel_5 = 0;
						
					xlsxTool_tFileOutputExcel_5.setColAutoSize(columnIndex_tFileOutputExcel_5);
	
							columnIndex_tFileOutputExcel_5 = 1;
						
					xlsxTool_tFileOutputExcel_5.setColAutoSize(columnIndex_tFileOutputExcel_5);
	
							columnIndex_tFileOutputExcel_5 = 2;
						
					xlsxTool_tFileOutputExcel_5.setColAutoSize(columnIndex_tFileOutputExcel_5);
	
							columnIndex_tFileOutputExcel_5 = 3;
						
					xlsxTool_tFileOutputExcel_5.setColAutoSize(columnIndex_tFileOutputExcel_5);
	
							columnIndex_tFileOutputExcel_5 = 4;
						
					xlsxTool_tFileOutputExcel_5.setColAutoSize(columnIndex_tFileOutputExcel_5);
	
							columnIndex_tFileOutputExcel_5 = 5;
						
					xlsxTool_tFileOutputExcel_5.setColAutoSize(columnIndex_tFileOutputExcel_5);
	
	
	
	
			xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5,true);
	
		
			nb_line_tFileOutputExcel_5 = nb_line_tFileOutputExcel_5 -1;
		
		globalMap.put("tFileOutputExcel_5_NB_LINE",nb_line_tFileOutputExcel_5);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row21"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_5", true);
end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());




/**
 * [tFileOutputExcel_5 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

							columnIndex_tFileOutputExcel_6 = 0;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 1;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 2;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 3;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 4;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 5;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
							columnIndex_tFileOutputExcel_6 = 6;
						
					xlsxTool_tFileOutputExcel_6.setColAutoSize(columnIndex_tFileOutputExcel_6);
	
	
	
	
			xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6,true);
	
		
			nb_line_tFileOutputExcel_6 = nb_line_tFileOutputExcel_6 -1;
		
		globalMap.put("tFileOutputExcel_6_NB_LINE",nb_line_tFileOutputExcel_6);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row22"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_6", true);
end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());




/**
 * [tFileOutputExcel_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileInputExcel_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_9";

	

 



/**
 * [tFileInputExcel_9 finally ] stop
 */

	
	/**
	 * [tFilterRow_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_9_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public java.util.Date testing_date;

				public java.util.Date getTesting_date () {
					return this.testing_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public java.util.Date treatment_date;

				public java.util.Date getTreatment_date () {
					return this.treatment_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid == null) ? 0 : this.patientid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.patientid == null) {
							if (other.patientid != null)
								return false;
						
						} else if (!this.patientid.equals(other.patientid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.patientid = this.patientid;
	            other.testing_date = this.testing_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.treatment_date = this.treatment_date;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.patientid = this.patientid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
					this.testing_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.treatment_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
					// java.util.Date
				
						writeDate(this.testing_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// java.util.Date
				
						writeDate(this.treatment_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",testing_date="+String.valueOf(testing_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",treatment_date="+String.valueOf(treatment_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid, other.patientid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.drug_date = this.drug_date;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.drug_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",drug_date="+String.valueOf(drug_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_2 other = (OnRowsEndStructtAggregateRow_2) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_2 other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_2 other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();
row24Struct row24 = new row24Struct();
row25Struct row25 = new row25Struct();
row13Struct row13 = new row13Struct();
row14Struct row14 = new row14Struct();





	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row24" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		
    	class BytesLimit65535_tAggregateRow_2_AGGOUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_2_AGGOUT().limitLog4jByte();

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String patientid1;
    				String chlamydia_result;
         			java.util.Date drug_date_max;
         			java.util.Date visit_date_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
							
							result = prime * result + ((this.chlamydia_result == null) ? 0 : this.chlamydia_result.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.patientid1 == null) {
								if (other.patientid1 != null) 
									return false;
							} else if (!this.patientid1.equals(other.patientid1)) 
								return false;
						
							if (this.chlamydia_result == null) {
								if (other.chlamydia_result != null) 
									return false;
							} else if (!this.chlamydia_result.equals(other.chlamydia_result)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tReplace_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_2", false);
		start_Hash.put("tReplace_2", System.currentTimeMillis());
		
	
	currentComponent="tReplace_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row23" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplace_2 = 0;
		
    	class BytesLimit65535_tReplace_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplace_2().limitLog4jByte();


int nb_line_tReplace_2 = 0;
 



/**
 * [tReplace_2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_10", false);
		start_Hash.put("tFileInputExcel_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_10";

	
		int tos_count_tFileInputExcel_10 = 0;
		
    	class BytesLimit65535_tFileInputExcel_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_10().limitLog4jByte();


			class RegexUtil_tFileInputExcel_10 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_10 regexUtil_tFileInputExcel_10 = new RegexUtil_tFileInputExcel_10();

		Object source_tFileInputExcel_10 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Temp_Chlamydia_Drug_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_10 = null;

		if(source_tFileInputExcel_10 instanceof String){
			workbook_tFileInputExcel_10 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_10);
		} else if(source_tFileInputExcel_10 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_10 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_10);
		} else{
			workbook_tFileInputExcel_10 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_10 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_10 : workbook_tFileInputExcel_10){
   			sheetList_tFileInputExcel_10.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_10);
    	}
    	if(sheetList_tFileInputExcel_10.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_10 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_10 : sheetList_tFileInputExcel_10) {
			if(sheet_FilterNull_tFileInputExcel_10!=null && sheetList_FilterNull_tFileInputExcel_10.iterator()!=null && sheet_FilterNull_tFileInputExcel_10.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_10.add(sheet_FilterNull_tFileInputExcel_10);
			}
		}
		sheetList_tFileInputExcel_10 = sheetList_FilterNull_tFileInputExcel_10;
	if(sheetList_tFileInputExcel_10.size()>0){
		int nb_line_tFileInputExcel_10 = 0;

        int begin_line_tFileInputExcel_10 = 0;

        int footer_input_tFileInputExcel_10 = 0;

        int end_line_tFileInputExcel_10=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_10:sheetList_tFileInputExcel_10){
			end_line_tFileInputExcel_10+=(sheet_tFileInputExcel_10.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_10 -= footer_input_tFileInputExcel_10;
        int limit_tFileInputExcel_10 = -1;
        int start_column_tFileInputExcel_10 = 1-1;
        int end_column_tFileInputExcel_10 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_10 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_10 = sheetList_tFileInputExcel_10.get(0);
        int rowCount_tFileInputExcel_10 = 0;
        int sheetIndex_tFileInputExcel_10 = 0;
        int currentRows_tFileInputExcel_10 = (sheetList_tFileInputExcel_10.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_10 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_10 = df_tFileInputExcel_10.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_10 = begin_line_tFileInputExcel_10; i_tFileInputExcel_10 < end_line_tFileInputExcel_10; i_tFileInputExcel_10++){

        	int emptyColumnCount_tFileInputExcel_10 = 0;

        	if (limit_tFileInputExcel_10 != -1 && nb_line_tFileInputExcel_10 >= limit_tFileInputExcel_10) {
        		break;
        	}

            while (i_tFileInputExcel_10 >= rowCount_tFileInputExcel_10 + currentRows_tFileInputExcel_10) {
                rowCount_tFileInputExcel_10 += currentRows_tFileInputExcel_10;
                sheet_tFileInputExcel_10 = sheetList_tFileInputExcel_10.get(++sheetIndex_tFileInputExcel_10);
                currentRows_tFileInputExcel_10 = (sheet_tFileInputExcel_10.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_10_CURRENT_SHEET",sheet_tFileInputExcel_10.getSheetName());
            if (rowCount_tFileInputExcel_10 <= i_tFileInputExcel_10) {
                row_tFileInputExcel_10 = sheet_tFileInputExcel_10.getRow(i_tFileInputExcel_10 - rowCount_tFileInputExcel_10);
            }
		    row23 = null;
					int tempRowLength_tFileInputExcel_10 = 6;
				
				int columnIndex_tFileInputExcel_10 = 0;
			
			String[] temp_row_tFileInputExcel_10 = new String[tempRowLength_tFileInputExcel_10];
			int excel_end_column_tFileInputExcel_10;
			if(row_tFileInputExcel_10==null){
				excel_end_column_tFileInputExcel_10=0;
			}else{
				excel_end_column_tFileInputExcel_10=row_tFileInputExcel_10.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_10;
			if(end_column_tFileInputExcel_10 == -1){
				actual_end_column_tFileInputExcel_10 = excel_end_column_tFileInputExcel_10;
			}
			else{
				actual_end_column_tFileInputExcel_10 = end_column_tFileInputExcel_10 >	excel_end_column_tFileInputExcel_10 ? excel_end_column_tFileInputExcel_10 : end_column_tFileInputExcel_10;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_10 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_10;i++){
				if(i + start_column_tFileInputExcel_10 < actual_end_column_tFileInputExcel_10){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_10 = row_tFileInputExcel_10.getCell(i + start_column_tFileInputExcel_10);
					if(cell_tFileInputExcel_10!=null){
					switch (cell_tFileInputExcel_10.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_10)) {
									temp_row_tFileInputExcel_10[i] =cell_tFileInputExcel_10.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_10[i] = df_tFileInputExcel_10.format(cell_tFileInputExcel_10.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_10[i] =String.valueOf(cell_tFileInputExcel_10.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_10.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_10)) {
											temp_row_tFileInputExcel_10[i] =cell_tFileInputExcel_10.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_10 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_10.getNumericCellValue());
										temp_row_tFileInputExcel_10[i] = ne_tFileInputExcel_10.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_10[i] =String.valueOf(cell_tFileInputExcel_10.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_10[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_10[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_10[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_10[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_10 = false;
			row23 = new row23Struct();
			int curColNum_tFileInputExcel_10 = -1;
			String curColName_tFileInputExcel_10 = "";
			try{
							columnIndex_tFileInputExcel_10 = 0;
						
			if( temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
				curColNum_tFileInputExcel_10=columnIndex_tFileInputExcel_10 + start_column_tFileInputExcel_10 + 1;
				curColName_tFileInputExcel_10 = "patientid1";

				row23.patientid1 = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
			}else{
				row23.patientid1 = null;
				emptyColumnCount_tFileInputExcel_10++;
			}
							columnIndex_tFileInputExcel_10 = 1;
						
			if( temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
				curColNum_tFileInputExcel_10=columnIndex_tFileInputExcel_10 + start_column_tFileInputExcel_10 + 1;
				curColName_tFileInputExcel_10 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_10){
					try{
						if(row_tFileInputExcel_10.getCell(columnIndex_tFileInputExcel_10+ start_column_tFileInputExcel_10).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_10.getCell(columnIndex_tFileInputExcel_10+ start_column_tFileInputExcel_10))){
							row23.visit_date = row_tFileInputExcel_10.getCell(columnIndex_tFileInputExcel_10+ start_column_tFileInputExcel_10).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_10 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_10.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_10.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_10+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_10 + " )");
                            }else{
                                row23.visit_date = tempDate_tFileInputExcel_10;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_10+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_10 + " )");
					}
				}

			}else{
				row23.visit_date = null;
				emptyColumnCount_tFileInputExcel_10++;
			}
							columnIndex_tFileInputExcel_10 = 2;
						
			if( temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
				curColNum_tFileInputExcel_10=columnIndex_tFileInputExcel_10 + start_column_tFileInputExcel_10 + 1;
				curColName_tFileInputExcel_10 = "chlamydia_result";

				row23.chlamydia_result = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
			}else{
				row23.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_10++;
			}
							columnIndex_tFileInputExcel_10 = 3;
						
			if( temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
				curColNum_tFileInputExcel_10=columnIndex_tFileInputExcel_10 + start_column_tFileInputExcel_10 + 1;
				curColName_tFileInputExcel_10 = "drug_description";

				row23.drug_description = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
			}else{
				row23.drug_description = null;
				emptyColumnCount_tFileInputExcel_10++;
			}
							columnIndex_tFileInputExcel_10 = 4;
						
			if( temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
				curColNum_tFileInputExcel_10=columnIndex_tFileInputExcel_10 + start_column_tFileInputExcel_10 + 1;
				curColName_tFileInputExcel_10 = "drug_date";

				if(4<actual_end_column_tFileInputExcel_10){
					try{
						if(row_tFileInputExcel_10.getCell(columnIndex_tFileInputExcel_10+ start_column_tFileInputExcel_10).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_10.getCell(columnIndex_tFileInputExcel_10+ start_column_tFileInputExcel_10))){
							row23.drug_date = row_tFileInputExcel_10.getCell(columnIndex_tFileInputExcel_10+ start_column_tFileInputExcel_10).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_10 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_10.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_10.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_10+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_10 + " )");
                            }else{
                                row23.drug_date = tempDate_tFileInputExcel_10;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_10+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_10 + " )");
					}
				}

			}else{
				row23.drug_date = null;
				emptyColumnCount_tFileInputExcel_10++;
			}
							columnIndex_tFileInputExcel_10 = 5;
						
			if( temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
				curColNum_tFileInputExcel_10=columnIndex_tFileInputExcel_10 + start_column_tFileInputExcel_10 + 1;
				curColName_tFileInputExcel_10 = "gpi";

				row23.gpi = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
			}else{
				row23.gpi = null;
				emptyColumnCount_tFileInputExcel_10++;
			}

				nb_line_tFileInputExcel_10++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_10 = true;
					 System.err.println(e.getMessage());
					 row23 = null;
			}


		



 



/**
 * [tFileInputExcel_10 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_10";

	

 


	tos_count_tFileInputExcel_10++;

/**
 * [tFileInputExcel_10 main ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tReplace_2 main ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	

			//row23
			//row23


			
				if(execStat){
					runStat.updateStatOnConnection("row23"+iterateId,1, 1);
				} 
			

		

						String searchStr_tReplace_2_1 = "DETECTED" + "";
							row23.chlamydia_result = StringUtils.replaceAllStrictly(row23.chlamydia_result, searchStr_tReplace_2_1, "POSITIVE" + "", true, false);
	        row24.patientid1 = row23.patientid1;
	        
	        row24.visit_date = row23.visit_date;
	        
	        row24.chlamydia_result = row23.chlamydia_result;
	        
	        row24.drug_description = row23.drug_description;
	        
	        row24.drug_date = row23.drug_date;
	        
	        row24.gpi = row23.gpi;
	        
    nb_line_tReplace_2++;

 


	tos_count_tReplace_2++;

/**
 * [tReplace_2 main ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

			//row24
			//row24


			
				if(execStat){
					runStat.updateStatOnConnection("row24"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_2.patientid1 = row24.patientid1;
			operation_finder_tAggregateRow_2.chlamydia_result = row24.chlamydia_result;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	
		boolean isFirstAdd_tAggregateRow_2 = false;
	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.patientid1 = operation_finder_tAggregateRow_2.patientid1;
				operation_result_tAggregateRow_2.chlamydia_result = operation_finder_tAggregateRow_2.chlamydia_result;
				
		
		
			isFirstAdd_tAggregateRow_2 = true;
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
					if( 
						
							operation_result_tAggregateRow_2.drug_date_max == null || row24.drug_date.compareTo(operation_result_tAggregateRow_2.drug_date_max) > 0
						
					) {
						operation_result_tAggregateRow_2.drug_date_max = row24.drug_date;
					}
					
					if( 
						
							operation_result_tAggregateRow_2.visit_date_max == null || row24.visit_date.compareTo(operation_result_tAggregateRow_2.visit_date_max) > 0
						
					) {
						operation_result_tAggregateRow_2.visit_date_max = row24.visit_date;
					}
					


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */




} // End of branch "row23"




	
	/**
	 * [tFileInputExcel_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_10";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_10_NB_LINE",nb_line_tFileInputExcel_10);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_10 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_10.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_10", true);
end_Hash.put("tFileInputExcel_10", System.currentTimeMillis());




/**
 * [tFileInputExcel_10 end ] stop
 */

	
	/**
	 * [tReplace_2 end ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	


globalMap.put("tReplace_2_NB_LINE",nb_line_tReplace_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row23"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplace_2", true);
end_Hash.put("tReplace_2", System.currentTimeMillis());




/**
 * [tReplace_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row24"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */




	
	/**
	 * [tFileOutputExcel_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_7", false);
		start_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_7 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_7().limitLog4jByte();


		int columnIndex_tFileOutputExcel_7 = 0;
		
		String fileName_tFileOutputExcel_7="C:/Users/MadhumithaRavi/Desktop/HBH/Output/Patients_treated_for_Chlamydia.xlsx";
		int nb_line_tFileOutputExcel_7 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_7 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_7.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_7.setAppend(false,false);
		xlsxTool_tFileOutputExcel_7.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_7.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_7.prepareXlsxFile(fileName_tFileOutputExcel_7);
		
		xlsxTool_tFileOutputExcel_7.setFont("");
		
		if (xlsxTool_tFileOutputExcel_7.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_7.addRow();
		
		xlsxTool_tFileOutputExcel_7.addCellValue("patientid");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("testing_date");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("chlamydia_result");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("treatment_date");
		
		nb_line_tFileOutputExcel_7++; 
		
	}
		

 



/**
 * [tFileOutputExcel_7 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row25" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_3 = 0;
		
    	class BytesLimit65535_tUniqRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_3().limitLog4jByte();

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String patientid1;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.patientid1 == null) {
										if (other.patientid1 != null) 
											return false;
								
									} else if (!this.patientid1.equals(other.patientid1))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		
    	class BytesLimit65535_tAggregateRow_2_AGGIN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_2_AGGIN().limitLog4jByte();

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

            				    row25.patientid1 = aggregated_row_tAggregateRow_2.patientid1;
            				    
                                row25.visit_date = aggregated_row_tAggregateRow_2.visit_date_max;
            				    row25.chlamydia_result = aggregated_row_tAggregateRow_2.chlamydia_result;
            				    
                                row25.drug_date = aggregated_row_tAggregateRow_2.drug_date_max;

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */

	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

			//row25
			//row25


			
				if(execStat){
					runStat.updateStatOnConnection("row25"+iterateId,1, 1);
				} 
			

		
row13 = null;			
if(row25.patientid1 == null){
	finder_tUniqRow_3.patientid1 = null;
}else{
	finder_tUniqRow_3.patientid1 = row25.patientid1.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(row25.patientid1 == null){
	new_tUniqRow_3.patientid1 = null;
}else{
	new_tUniqRow_3.patientid1 = row25.patientid1.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.patientid1 = row25.patientid1;			row13.visit_date = row25.visit_date;			row13.chlamydia_result = row25.chlamydia_result;			row13.drug_date = row25.drug_date;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row14.patientid = row13.patientid1;
row14.testing_date = row13.visit_date;
row14.chlamydia_result = row13.chlamydia_result;
row14.treatment_date = row13.drug_date;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_7.addRow();
									   				
	    				if(row14.patientid != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row14.patientid));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row14.testing_date != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(row14.testing_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row14.chlamydia_result != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row14.chlamydia_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row14.treatment_date != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(row14.treatment_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_7++;
				
 


	tos_count_tFileOutputExcel_7++;

/**
 * [tFileOutputExcel_7 main ] stop
 */




} // End of branch "row13"







	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row25"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

							columnIndex_tFileOutputExcel_7 = 0;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 1;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 2;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
							columnIndex_tFileOutputExcel_7 = 3;
						
					xlsxTool_tFileOutputExcel_7.setColAutoSize(columnIndex_tFileOutputExcel_7);
	
	
	
	
			xlsxTool_tFileOutputExcel_7.writeExcel(fileName_tFileOutputExcel_7,true);
	
		
			nb_line_tFileOutputExcel_7 = nb_line_tFileOutputExcel_7 -1;
		
		globalMap.put("tFileOutputExcel_7_NB_LINE",nb_line_tFileOutputExcel_7);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_7", true);
end_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());




/**
 * [tFileOutputExcel_7 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileInputExcel_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tFileInputExcel_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_10";

	

 



/**
 * [tFileInputExcel_10 finally ] stop
 */

	
	/**
	 * [tReplace_2 finally ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	

 



/**
 * [tReplace_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

 



/**
 * [tFileOutputExcel_7 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_10_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public java.util.Date testing_date;

				public java.util.Date getTesting_date () {
					return this.testing_date;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public java.util.Date treatment_date;

				public java.util.Date getTreatment_date () {
					return this.treatment_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid == null) ? 0 : this.patientid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.patientid == null) {
							if (other.patientid != null)
								return false;
						
						} else if (!this.patientid.equals(other.patientid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.patientid = this.patientid;
	            other.testing_date = this.testing_date;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.treatment_date = this.treatment_date;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.patientid = this.patientid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
					this.testing_date = readDate(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.treatment_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
					// java.util.Date
				
						writeDate(this.testing_date,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// java.util.Date
				
						writeDate(this.treatment_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",testing_date="+String.valueOf(testing_date));
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",treatment_date="+String.valueOf(treatment_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid, other.patientid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_date = this.drug_date;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_date="+String.valueOf(drug_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_3 other = (OnRowsEndStructtAggregateRow_3) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_3 other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_3 other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();
row30Struct row30 = new row30Struct();
row27Struct row27 = new row27Struct();
row26Struct row26 = new row26Struct();
row28Struct row28 = new row28Struct();





	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row30" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		
    	class BytesLimit65535_tAggregateRow_3_AGGOUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_3_AGGOUT().limitLog4jByte();

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

	

	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String patientid1;
    				String gonorrhea_result;
         			java.util.Date drug_date_max;
         			java.util.Date visit_date_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
							
							result = prime * result + ((this.gonorrhea_result == null) ? 0 : this.gonorrhea_result.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
							if (this.patientid1 == null) {
								if (other.patientid1 != null) 
									return false;
							} else if (!this.patientid1.equals(other.patientid1)) 
								return false;
						
							if (this.gonorrhea_result == null) {
								if (other.gonorrhea_result != null) 
									return false;
							} else if (!this.gonorrhea_result.equals(other.gonorrhea_result)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */



	
	/**
	 * [tReplace_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_3", false);
		start_Hash.put("tReplace_3", System.currentTimeMillis());
		
	
	currentComponent="tReplace_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row29" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplace_3 = 0;
		
    	class BytesLimit65535_tReplace_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplace_3().limitLog4jByte();


int nb_line_tReplace_3 = 0;
 



/**
 * [tReplace_3 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_11", false);
		start_Hash.put("tFileInputExcel_11", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_11";

	
		int tos_count_tFileInputExcel_11 = 0;
		
    	class BytesLimit65535_tFileInputExcel_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_11().limitLog4jByte();


			class RegexUtil_tFileInputExcel_11 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_11 regexUtil_tFileInputExcel_11 = new RegexUtil_tFileInputExcel_11();

		Object source_tFileInputExcel_11 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Temp_Gonorrhea_Drug_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_11 = null;

		if(source_tFileInputExcel_11 instanceof String){
			workbook_tFileInputExcel_11 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_11);
		} else if(source_tFileInputExcel_11 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_11 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_11);
		} else{
			workbook_tFileInputExcel_11 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_11 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_11 : workbook_tFileInputExcel_11){
   			sheetList_tFileInputExcel_11.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_11);
    	}
    	if(sheetList_tFileInputExcel_11.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_11 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_11 : sheetList_tFileInputExcel_11) {
			if(sheet_FilterNull_tFileInputExcel_11!=null && sheetList_FilterNull_tFileInputExcel_11.iterator()!=null && sheet_FilterNull_tFileInputExcel_11.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_11.add(sheet_FilterNull_tFileInputExcel_11);
			}
		}
		sheetList_tFileInputExcel_11 = sheetList_FilterNull_tFileInputExcel_11;
	if(sheetList_tFileInputExcel_11.size()>0){
		int nb_line_tFileInputExcel_11 = 0;

        int begin_line_tFileInputExcel_11 = 0;

        int footer_input_tFileInputExcel_11 = 0;

        int end_line_tFileInputExcel_11=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_11:sheetList_tFileInputExcel_11){
			end_line_tFileInputExcel_11+=(sheet_tFileInputExcel_11.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_11 -= footer_input_tFileInputExcel_11;
        int limit_tFileInputExcel_11 = -1;
        int start_column_tFileInputExcel_11 = 1-1;
        int end_column_tFileInputExcel_11 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_11 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_11 = sheetList_tFileInputExcel_11.get(0);
        int rowCount_tFileInputExcel_11 = 0;
        int sheetIndex_tFileInputExcel_11 = 0;
        int currentRows_tFileInputExcel_11 = (sheetList_tFileInputExcel_11.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_11 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_11 = df_tFileInputExcel_11.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_11 = begin_line_tFileInputExcel_11; i_tFileInputExcel_11 < end_line_tFileInputExcel_11; i_tFileInputExcel_11++){

        	int emptyColumnCount_tFileInputExcel_11 = 0;

        	if (limit_tFileInputExcel_11 != -1 && nb_line_tFileInputExcel_11 >= limit_tFileInputExcel_11) {
        		break;
        	}

            while (i_tFileInputExcel_11 >= rowCount_tFileInputExcel_11 + currentRows_tFileInputExcel_11) {
                rowCount_tFileInputExcel_11 += currentRows_tFileInputExcel_11;
                sheet_tFileInputExcel_11 = sheetList_tFileInputExcel_11.get(++sheetIndex_tFileInputExcel_11);
                currentRows_tFileInputExcel_11 = (sheet_tFileInputExcel_11.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_11_CURRENT_SHEET",sheet_tFileInputExcel_11.getSheetName());
            if (rowCount_tFileInputExcel_11 <= i_tFileInputExcel_11) {
                row_tFileInputExcel_11 = sheet_tFileInputExcel_11.getRow(i_tFileInputExcel_11 - rowCount_tFileInputExcel_11);
            }
		    row29 = null;
					int tempRowLength_tFileInputExcel_11 = 7;
				
				int columnIndex_tFileInputExcel_11 = 0;
			
			String[] temp_row_tFileInputExcel_11 = new String[tempRowLength_tFileInputExcel_11];
			int excel_end_column_tFileInputExcel_11;
			if(row_tFileInputExcel_11==null){
				excel_end_column_tFileInputExcel_11=0;
			}else{
				excel_end_column_tFileInputExcel_11=row_tFileInputExcel_11.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_11;
			if(end_column_tFileInputExcel_11 == -1){
				actual_end_column_tFileInputExcel_11 = excel_end_column_tFileInputExcel_11;
			}
			else{
				actual_end_column_tFileInputExcel_11 = end_column_tFileInputExcel_11 >	excel_end_column_tFileInputExcel_11 ? excel_end_column_tFileInputExcel_11 : end_column_tFileInputExcel_11;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_11 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_11;i++){
				if(i + start_column_tFileInputExcel_11 < actual_end_column_tFileInputExcel_11){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_11 = row_tFileInputExcel_11.getCell(i + start_column_tFileInputExcel_11);
					if(cell_tFileInputExcel_11!=null){
					switch (cell_tFileInputExcel_11.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_11[i] = cell_tFileInputExcel_11.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_11)) {
									temp_row_tFileInputExcel_11[i] =cell_tFileInputExcel_11.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_11[i] = df_tFileInputExcel_11.format(cell_tFileInputExcel_11.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_11[i] =String.valueOf(cell_tFileInputExcel_11.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_11.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_11[i] = cell_tFileInputExcel_11.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_11)) {
											temp_row_tFileInputExcel_11[i] =cell_tFileInputExcel_11.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_11 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_11.getNumericCellValue());
										temp_row_tFileInputExcel_11[i] = ne_tFileInputExcel_11.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_11[i] =String.valueOf(cell_tFileInputExcel_11.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_11[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_11[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_11[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_11[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_11 = false;
			row29 = new row29Struct();
			int curColNum_tFileInputExcel_11 = -1;
			String curColName_tFileInputExcel_11 = "";
			try{
							columnIndex_tFileInputExcel_11 = 0;
						
			if( temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
				curColNum_tFileInputExcel_11=columnIndex_tFileInputExcel_11 + start_column_tFileInputExcel_11 + 1;
				curColName_tFileInputExcel_11 = "patientid1";

				row29.patientid1 = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
			}else{
				row29.patientid1 = null;
				emptyColumnCount_tFileInputExcel_11++;
			}
							columnIndex_tFileInputExcel_11 = 1;
						
			if( temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
				curColNum_tFileInputExcel_11=columnIndex_tFileInputExcel_11 + start_column_tFileInputExcel_11 + 1;
				curColName_tFileInputExcel_11 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_11){
					try{
						if(row_tFileInputExcel_11.getCell(columnIndex_tFileInputExcel_11+ start_column_tFileInputExcel_11).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_11.getCell(columnIndex_tFileInputExcel_11+ start_column_tFileInputExcel_11))){
							row29.visit_date = row_tFileInputExcel_11.getCell(columnIndex_tFileInputExcel_11+ start_column_tFileInputExcel_11).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_11 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_11.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_11.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_11+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_11 + " )");
                            }else{
                                row29.visit_date = tempDate_tFileInputExcel_11;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_11+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_11 + " )");
					}
				}

			}else{
				row29.visit_date = null;
				emptyColumnCount_tFileInputExcel_11++;
			}
							columnIndex_tFileInputExcel_11 = 2;
						
			if( temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
				curColNum_tFileInputExcel_11=columnIndex_tFileInputExcel_11 + start_column_tFileInputExcel_11 + 1;
				curColName_tFileInputExcel_11 = "gonorrhea_result";

				row29.gonorrhea_result = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
			}else{
				row29.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_11++;
			}
							columnIndex_tFileInputExcel_11 = 3;
						
			if( temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
				curColNum_tFileInputExcel_11=columnIndex_tFileInputExcel_11 + start_column_tFileInputExcel_11 + 1;
				curColName_tFileInputExcel_11 = "drug_description";

				row29.drug_description = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
			}else{
				row29.drug_description = null;
				emptyColumnCount_tFileInputExcel_11++;
			}
							columnIndex_tFileInputExcel_11 = 4;
						
			if( temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
				curColNum_tFileInputExcel_11=columnIndex_tFileInputExcel_11 + start_column_tFileInputExcel_11 + 1;
				curColName_tFileInputExcel_11 = "drug_date";

				if(4<actual_end_column_tFileInputExcel_11){
					try{
						if(row_tFileInputExcel_11.getCell(columnIndex_tFileInputExcel_11+ start_column_tFileInputExcel_11).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_11.getCell(columnIndex_tFileInputExcel_11+ start_column_tFileInputExcel_11))){
							row29.drug_date = row_tFileInputExcel_11.getCell(columnIndex_tFileInputExcel_11+ start_column_tFileInputExcel_11).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_11 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_11.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_11.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_11+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_11 + " )");
                            }else{
                                row29.drug_date = tempDate_tFileInputExcel_11;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_11+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_11 + " )");
					}
				}

			}else{
				row29.drug_date = null;
				emptyColumnCount_tFileInputExcel_11++;
			}
							columnIndex_tFileInputExcel_11 = 5;
						
			if( temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
				curColNum_tFileInputExcel_11=columnIndex_tFileInputExcel_11 + start_column_tFileInputExcel_11 + 1;
				curColName_tFileInputExcel_11 = "gpi";

				row29.gpi = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
			}else{
				row29.gpi = null;
				emptyColumnCount_tFileInputExcel_11++;
			}
							columnIndex_tFileInputExcel_11 = 6;
						
			if( temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
				curColNum_tFileInputExcel_11=columnIndex_tFileInputExcel_11 + start_column_tFileInputExcel_11 + 1;
				curColName_tFileInputExcel_11 = "errorMessage";

				row29.errorMessage = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
			}else{
				row29.errorMessage = null;
				emptyColumnCount_tFileInputExcel_11++;
			}

				nb_line_tFileInputExcel_11++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_11 = true;
					 System.err.println(e.getMessage());
					 row29 = null;
			}


		



 



/**
 * [tFileInputExcel_11 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_11 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_11";

	

 


	tos_count_tFileInputExcel_11++;

/**
 * [tFileInputExcel_11 main ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tReplace_3 main ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	

			//row29
			//row29


			
				if(execStat){
					runStat.updateStatOnConnection("row29"+iterateId,1, 1);
				} 
			

		

						String searchStr_tReplace_3_1 = "DETECTED" + "";
							row29.gonorrhea_result = StringUtils.replaceAllStrictly(row29.gonorrhea_result, searchStr_tReplace_3_1, "POSITIVE" + "", true, false);
	        row30.patientid1 = row29.patientid1;
	        
	        row30.visit_date = row29.visit_date;
	        
	        row30.gonorrhea_result = row29.gonorrhea_result;
	        
	        row30.drug_description = row29.drug_description;
	        
	        row30.drug_date = row29.drug_date;
	        
	        row30.gpi = row29.gpi;
	        
	        row30.errorMessage = row29.errorMessage;
	        
    nb_line_tReplace_3++;

 


	tos_count_tReplace_3++;

/**
 * [tReplace_3 main ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

			//row30
			//row30


			
				if(execStat){
					runStat.updateStatOnConnection("row30"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_3.patientid1 = row30.patientid1;
			operation_finder_tAggregateRow_3.gonorrhea_result = row30.gonorrhea_result;
			

	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	
		boolean isFirstAdd_tAggregateRow_3 = false;
	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		operation_result_tAggregateRow_3.patientid1 = operation_finder_tAggregateRow_3.patientid1;
				operation_result_tAggregateRow_3.gonorrhea_result = operation_finder_tAggregateRow_3.gonorrhea_result;
				
		
		
			isFirstAdd_tAggregateRow_3 = true;
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	
					if( 
						
							operation_result_tAggregateRow_3.drug_date_max == null || row30.drug_date.compareTo(operation_result_tAggregateRow_3.drug_date_max) > 0
						
					) {
						operation_result_tAggregateRow_3.drug_date_max = row30.drug_date;
					}
					
					if( 
						
							operation_result_tAggregateRow_3.visit_date_max == null || row30.visit_date.compareTo(operation_result_tAggregateRow_3.visit_date_max) > 0
						
					) {
						operation_result_tAggregateRow_3.visit_date_max = row30.visit_date;
					}
					


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */




} // End of branch "row29"




	
	/**
	 * [tFileInputExcel_11 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_11";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_11_NB_LINE",nb_line_tFileInputExcel_11);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_11 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_11.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_11", true);
end_Hash.put("tFileInputExcel_11", System.currentTimeMillis());




/**
 * [tFileInputExcel_11 end ] stop
 */

	
	/**
	 * [tReplace_3 end ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	


globalMap.put("tReplace_3_NB_LINE",nb_line_tReplace_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row29"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplace_3", true);
end_Hash.put("tReplace_3", System.currentTimeMillis());




/**
 * [tReplace_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row30"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */




	
	/**
	 * [tFileOutputExcel_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_8", false);
		start_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row28" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_8 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_8().limitLog4jByte();


		int columnIndex_tFileOutputExcel_8 = 0;
		
		String fileName_tFileOutputExcel_8="C:/Users/MadhumithaRavi/Desktop/HBH/Output/Patients_treated_for_Gonorrhea.xlsx";
		int nb_line_tFileOutputExcel_8 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_8 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_8.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_8.setAppend(false,false);
		xlsxTool_tFileOutputExcel_8.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_8.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_8.prepareXlsxFile(fileName_tFileOutputExcel_8);
		
		xlsxTool_tFileOutputExcel_8.setFont("");
		
		if (xlsxTool_tFileOutputExcel_8.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_8.addRow();
		
		xlsxTool_tFileOutputExcel_8.addCellValue("patientid");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("testing_date");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("gonorrhea_result");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("treatment_date");
		
		nb_line_tFileOutputExcel_8++; 
		
	}
		

 



/**
 * [tFileOutputExcel_8 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row26" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_3 = 0;
		
    	class BytesLimit65535_tJavaRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_3().limitLog4jByte();

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row27" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_4 = 0;
		
    	class BytesLimit65535_tUniqRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_4().limitLog4jByte();

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String patientid1;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.patientid1 == null) {
										if (other.patientid1 != null) 
											return false;
								
									} else if (!this.patientid1.equals(other.patientid1))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		
    	class BytesLimit65535_tAggregateRow_3_AGGIN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_3_AGGIN().limitLog4jByte();

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

            				    row27.patientid1 = aggregated_row_tAggregateRow_3.patientid1;
            				    
                                row27.visit_date = aggregated_row_tAggregateRow_3.visit_date_max;
            				    row27.gonorrhea_result = aggregated_row_tAggregateRow_3.gonorrhea_result;
            				    
                                row27.drug_date = aggregated_row_tAggregateRow_3.drug_date_max;

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */

	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

			//row27
			//row27


			
				if(execStat){
					runStat.updateStatOnConnection("row27"+iterateId,1, 1);
				} 
			

		
row26 = null;			
if(row27.patientid1 == null){
	finder_tUniqRow_4.patientid1 = null;
}else{
	finder_tUniqRow_4.patientid1 = row27.patientid1.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(row27.patientid1 == null){
	new_tUniqRow_4.patientid1 = null;
}else{
	new_tUniqRow_4.patientid1 = row27.patientid1.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(row26 == null){ 
	
	row26 = new row26Struct();
}row26.patientid1 = row27.patientid1;			row26.visit_date = row27.visit_date;			row26.gonorrhea_result = row27.gonorrhea_result;			row26.drug_date = row27.drug_date;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

			//row26
			//row26


			
				if(execStat){
					runStat.updateStatOnConnection("row26"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row28.patientid = row26.patientid1;
row28.testing_date = row26.visit_date;
row28.gonorrhea_result = row26.gonorrhea_result;
row28.treatment_date = row26.drug_date;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

			//row28
			//row28


			
				if(execStat){
					runStat.updateStatOnConnection("row28"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_8.addRow();
									   				
	    				if(row28.patientid != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row28.patientid));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row28.testing_date != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(row28.testing_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row28.gonorrhea_result != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row28.gonorrhea_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row28.treatment_date != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(row28.treatment_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_8++;
				
 


	tos_count_tFileOutputExcel_8++;

/**
 * [tFileOutputExcel_8 main ] stop
 */




} // End of branch "row26"







	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row27"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row26"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

							columnIndex_tFileOutputExcel_8 = 0;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 1;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 2;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
							columnIndex_tFileOutputExcel_8 = 3;
						
					xlsxTool_tFileOutputExcel_8.setColAutoSize(columnIndex_tFileOutputExcel_8);
	
	
	
	
			xlsxTool_tFileOutputExcel_8.writeExcel(fileName_tFileOutputExcel_8,true);
	
		
			nb_line_tFileOutputExcel_8 = nb_line_tFileOutputExcel_8 -1;
		
		globalMap.put("tFileOutputExcel_8_NB_LINE",nb_line_tFileOutputExcel_8);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row28"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_8", true);
end_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());




/**
 * [tFileOutputExcel_8 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
				try{
					
	
	/**
	 * [tFileInputExcel_11 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_11";

	

 



/**
 * [tFileInputExcel_11 finally ] stop
 */

	
	/**
	 * [tReplace_3 finally ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	

 



/**
 * [tReplace_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

 



/**
 * [tFileOutputExcel_8 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_11_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public java.util.Date testing_date;

				public java.util.Date getTesting_date () {
					return this.testing_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid == null) ? 0 : this.patientid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.patientid == null) {
							if (other.patientid != null)
								return false;
						
						} else if (!this.patientid.equals(other.patientid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.patientid = this.patientid;
	            other.testing_date = this.testing_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.patientid = this.patientid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
					this.testing_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
					// java.util.Date
				
						writeDate(this.testing_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",testing_date="+String.valueOf(testing_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid, other.patientid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_3 other = (OnRowsEndStructtSortRow_3) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_3 other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_3 other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_3 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfDrug_Indicator_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfDrug_Indicator_0Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfcopyOfDrug_Indicator_0Struct other = (copyOfcopyOfcopyOfDrug_Indicator_0Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfcopyOfDrug_Indicator_0Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfcopyOfDrug_Indicator_0Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfDrug_Indicator_0Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_date = readDate(dis,ois);
					
						this.chlamydia_result = readString(dis,ois);
					
						this.gonorrhea_result = readString(dis,ois);
					
						this.drug_description = readString(dis,ois);
					
						this.drug_date = readDate(dis,ois);
					
						this.gpi = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.visit_date, dos, oos);
					
						writeString(this.chlamydia_result, dos, oos);
					
						writeString(this.gonorrhea_result, dos, oos);
					
						writeString(this.drug_description, dos, oos);
					
						writeDate(this.drug_date, dos, oos);
					
						writeString(this.gpi, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_4Struct implements routines.system.IPersistableRow<after_tFileInputExcel_4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputExcel_4Struct other = (after_tFileInputExcel_4Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputExcel_4Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(after_tFileInputExcel_4Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputExcel_3Process(globalMap);

		row8Struct row8 = new row8Struct();
copyOfcopyOfcopyOfDrug_Indicator_0Struct copyOfcopyOfcopyOfDrug_Indicator_0 = new copyOfcopyOfcopyOfDrug_Indicator_0Struct();
row9Struct row9 = new row9Struct();
row11Struct row11 = new row11Struct();
row12Struct row12 = new row12Struct();






	
	/**
	 * [tSortRow_3_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_3_SortOut", false);
		start_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_3_SortOut = 0;
		
    	class BytesLimit65535_tSortRow_3_SortOut{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_3_SortOut().limitLog4jByte();


class Comparablerow9Struct extends row9Struct implements Comparable<Comparablerow9Struct> {
	
	public int compareTo(Comparablerow9Struct other) {

		if(this.patientid1 == null && other.patientid1 != null){
			return -1;
						
		}else if(this.patientid1 != null && other.patientid1 == null){
			return 1;
						
		}else if(this.patientid1 != null && other.patientid1 != null){
			if(!this.patientid1.equals(other.patientid1)){
				return this.patientid1.compareTo(other.patientid1);
			}
		}
		if(this.visit_date == null && other.visit_date != null){
			return -1;
						
		}else if(this.visit_date != null && other.visit_date == null){
			return 1;
						
		}else if(this.visit_date != null && other.visit_date != null){
			if(!this.visit_date.equals(other.visit_date)){
				return this.visit_date.compareTo(other.visit_date);
			}
		}
		if(this.chlamydia_result == null && other.chlamydia_result != null){
			return -1;
						
		}else if(this.chlamydia_result != null && other.chlamydia_result == null){
			return 1;
						
		}else if(this.chlamydia_result != null && other.chlamydia_result != null){
			if(!this.chlamydia_result.equals(other.chlamydia_result)){
				return this.chlamydia_result.compareTo(other.chlamydia_result);
			}
		}
		if(this.gonorrhea_result == null && other.gonorrhea_result != null){
			return -1;
						
		}else if(this.gonorrhea_result != null && other.gonorrhea_result == null){
			return 1;
						
		}else if(this.gonorrhea_result != null && other.gonorrhea_result != null){
			if(!this.gonorrhea_result.equals(other.gonorrhea_result)){
				return this.gonorrhea_result.compareTo(other.gonorrhea_result);
			}
		}
		if(this.drug_description == null && other.drug_description != null){
			return -1;
						
		}else if(this.drug_description != null && other.drug_description == null){
			return 1;
						
		}else if(this.drug_description != null && other.drug_description != null){
			if(!this.drug_description.equals(other.drug_description)){
				return this.drug_description.compareTo(other.drug_description);
			}
		}
		if(this.drug_date == null && other.drug_date != null){
			return -1;
						
		}else if(this.drug_date != null && other.drug_date == null){
			return 1;
						
		}else if(this.drug_date != null && other.drug_date != null){
			if(!this.drug_date.equals(other.drug_date)){
				return this.drug_date.compareTo(other.drug_date);
			}
		}
		if(this.gpi == null && other.gpi != null){
			return -1;
						
		}else if(this.gpi != null && other.gpi == null){
			return 1;
						
		}else if(this.gpi != null && other.gpi != null){
			if(!this.gpi.equals(other.gpi)){
				return this.gpi.compareTo(other.gpi);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow9Struct> list_tSortRow_3_SortOut = new java.util.ArrayList<Comparablerow9Struct>();


 



/**
 * [tSortRow_3_SortOut begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfcopyOfcopyOfDrug_Indicator_0" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		
    	class BytesLimit65535_tUniqRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_1().limitLog4jByte();

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String patientid1;
					java.util.Date visit_date;
					String chlamydia_result;
					String gonorrhea_result;
					String drug_description;
					java.util.Date drug_date;
					String gpi;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
								
								result = prime * result + ((this.visit_date == null) ? 0 : this.visit_date.hashCode());
								
								result = prime * result + ((this.chlamydia_result == null) ? 0 : this.chlamydia_result.hashCode());
								
								result = prime * result + ((this.gonorrhea_result == null) ? 0 : this.gonorrhea_result.hashCode());
								
								result = prime * result + ((this.drug_description == null) ? 0 : this.drug_description.hashCode());
								
								result = prime * result + ((this.drug_date == null) ? 0 : this.drug_date.hashCode());
								
								result = prime * result + ((this.gpi == null) ? 0 : this.gpi.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.patientid1 == null) {
										if (other.patientid1 != null) 
											return false;
								
									} else if (!this.patientid1.equals(other.patientid1))
								 
										return false;
								
									if (this.visit_date == null) {
										if (other.visit_date != null) 
											return false;
								
									} else if (!this.visit_date.equals(other.visit_date))
								 
										return false;
								
									if (this.chlamydia_result == null) {
										if (other.chlamydia_result != null) 
											return false;
								
									} else if (!this.chlamydia_result.equals(other.chlamydia_result))
								 
										return false;
								
									if (this.gonorrhea_result == null) {
										if (other.gonorrhea_result != null) 
											return false;
								
									} else if (!this.gonorrhea_result.equals(other.gonorrhea_result))
								 
										return false;
								
									if (this.drug_description == null) {
										if (other.drug_description != null) 
											return false;
								
									} else if (!this.drug_description.equals(other.drug_description))
								 
										return false;
								
									if (this.drug_date == null) {
										if (other.drug_date != null) 
											return false;
								
									} else if (!this.drug_date.equals(other.drug_date))
								 
										return false;
								
									if (this.gpi == null) {
										if (other.gpi != null) 
											return false;
								
									} else if (!this.gpi.equals(other.gpi))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfDrug_Indicator_0Struct copyOfcopyOfcopyOfDrug_Indicator_0_tmp = new copyOfcopyOfcopyOfDrug_Indicator_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_4", false);
		start_Hash.put("tFileInputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_4";

	
		int tos_count_tFileInputExcel_4 = 0;
		
    	class BytesLimit65535_tFileInputExcel_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_4().limitLog4jByte();


			class RegexUtil_tFileInputExcel_4 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_4 regexUtil_tFileInputExcel_4 = new RegexUtil_tFileInputExcel_4();

		Object source_tFileInputExcel_4 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Lookup_Drugs_Absent_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_4 = null;

		if(source_tFileInputExcel_4 instanceof String){
			workbook_tFileInputExcel_4 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_4);
		} else if(source_tFileInputExcel_4 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_4 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_4);
		} else{
			workbook_tFileInputExcel_4 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_4 : workbook_tFileInputExcel_4){
   			sheetList_tFileInputExcel_4.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_4);
    	}
    	if(sheetList_tFileInputExcel_4.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_4 : sheetList_tFileInputExcel_4) {
			if(sheet_FilterNull_tFileInputExcel_4!=null && sheetList_FilterNull_tFileInputExcel_4.iterator()!=null && sheet_FilterNull_tFileInputExcel_4.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_4.add(sheet_FilterNull_tFileInputExcel_4);
			}
		}
		sheetList_tFileInputExcel_4 = sheetList_FilterNull_tFileInputExcel_4;
	if(sheetList_tFileInputExcel_4.size()>0){
		int nb_line_tFileInputExcel_4 = 0;

        int begin_line_tFileInputExcel_4 = 0;

        int footer_input_tFileInputExcel_4 = 0;

        int end_line_tFileInputExcel_4=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4:sheetList_tFileInputExcel_4){
			end_line_tFileInputExcel_4+=(sheet_tFileInputExcel_4.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_4 -= footer_input_tFileInputExcel_4;
        int limit_tFileInputExcel_4 = -1;
        int start_column_tFileInputExcel_4 = 1-1;
        int end_column_tFileInputExcel_4 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_4 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(0);
        int rowCount_tFileInputExcel_4 = 0;
        int sheetIndex_tFileInputExcel_4 = 0;
        int currentRows_tFileInputExcel_4 = (sheetList_tFileInputExcel_4.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_4 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_4 = df_tFileInputExcel_4.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_4 = begin_line_tFileInputExcel_4; i_tFileInputExcel_4 < end_line_tFileInputExcel_4; i_tFileInputExcel_4++){

        	int emptyColumnCount_tFileInputExcel_4 = 0;

        	if (limit_tFileInputExcel_4 != -1 && nb_line_tFileInputExcel_4 >= limit_tFileInputExcel_4) {
        		break;
        	}

            while (i_tFileInputExcel_4 >= rowCount_tFileInputExcel_4 + currentRows_tFileInputExcel_4) {
                rowCount_tFileInputExcel_4 += currentRows_tFileInputExcel_4;
                sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(++sheetIndex_tFileInputExcel_4);
                currentRows_tFileInputExcel_4 = (sheet_tFileInputExcel_4.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_4_CURRENT_SHEET",sheet_tFileInputExcel_4.getSheetName());
            if (rowCount_tFileInputExcel_4 <= i_tFileInputExcel_4) {
                row_tFileInputExcel_4 = sheet_tFileInputExcel_4.getRow(i_tFileInputExcel_4 - rowCount_tFileInputExcel_4);
            }
		    row8 = null;
					int tempRowLength_tFileInputExcel_4 = 7;
				
				int columnIndex_tFileInputExcel_4 = 0;
			
			String[] temp_row_tFileInputExcel_4 = new String[tempRowLength_tFileInputExcel_4];
			int excel_end_column_tFileInputExcel_4;
			if(row_tFileInputExcel_4==null){
				excel_end_column_tFileInputExcel_4=0;
			}else{
				excel_end_column_tFileInputExcel_4=row_tFileInputExcel_4.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_4;
			if(end_column_tFileInputExcel_4 == -1){
				actual_end_column_tFileInputExcel_4 = excel_end_column_tFileInputExcel_4;
			}
			else{
				actual_end_column_tFileInputExcel_4 = end_column_tFileInputExcel_4 >	excel_end_column_tFileInputExcel_4 ? excel_end_column_tFileInputExcel_4 : end_column_tFileInputExcel_4;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_4 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_4;i++){
				if(i + start_column_tFileInputExcel_4 < actual_end_column_tFileInputExcel_4){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_4 = row_tFileInputExcel_4.getCell(i + start_column_tFileInputExcel_4);
					if(cell_tFileInputExcel_4!=null){
					switch (cell_tFileInputExcel_4.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_4)) {
									temp_row_tFileInputExcel_4[i] =cell_tFileInputExcel_4.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_4[i] = df_tFileInputExcel_4.format(cell_tFileInputExcel_4.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_4[i] =String.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_4.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_4)) {
											temp_row_tFileInputExcel_4[i] =cell_tFileInputExcel_4.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_4 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_4.getNumericCellValue());
										temp_row_tFileInputExcel_4[i] = ne_tFileInputExcel_4.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_4[i] =String.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_4[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_4[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_4[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_4[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_4 = false;
			row8 = new row8Struct();
			int curColNum_tFileInputExcel_4 = -1;
			String curColName_tFileInputExcel_4 = "";
			try{
							columnIndex_tFileInputExcel_4 = 0;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "patientid1";

				row8.patientid1 = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else{
				row8.patientid1 = null;
				emptyColumnCount_tFileInputExcel_4++;
			}
							columnIndex_tFileInputExcel_4 = 1;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_4){
					try{
						if(row_tFileInputExcel_4.getCell(columnIndex_tFileInputExcel_4+ start_column_tFileInputExcel_4).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_4.getCell(columnIndex_tFileInputExcel_4+ start_column_tFileInputExcel_4))){
							row8.visit_date = row_tFileInputExcel_4.getCell(columnIndex_tFileInputExcel_4+ start_column_tFileInputExcel_4).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_4 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_4.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_4.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_4+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_4 + " )");
                            }else{
                                row8.visit_date = tempDate_tFileInputExcel_4;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_4+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_4 + " )");
					}
				}

			}else{
				row8.visit_date = null;
				emptyColumnCount_tFileInputExcel_4++;
			}
							columnIndex_tFileInputExcel_4 = 2;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "chlamydia_result";

				row8.chlamydia_result = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else{
				row8.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_4++;
			}
							columnIndex_tFileInputExcel_4 = 3;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "gonorrhea_result";

				row8.gonorrhea_result = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else{
				row8.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_4++;
			}
							columnIndex_tFileInputExcel_4 = 4;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "drug_description";

				row8.drug_description = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else{
				row8.drug_description = null;
				emptyColumnCount_tFileInputExcel_4++;
			}
							columnIndex_tFileInputExcel_4 = 5;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "drug_date";

				if(5<actual_end_column_tFileInputExcel_4){
					try{
						if(row_tFileInputExcel_4.getCell(columnIndex_tFileInputExcel_4+ start_column_tFileInputExcel_4).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_4.getCell(columnIndex_tFileInputExcel_4+ start_column_tFileInputExcel_4))){
							row8.drug_date = row_tFileInputExcel_4.getCell(columnIndex_tFileInputExcel_4+ start_column_tFileInputExcel_4).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_4 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_4.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_4.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_4+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_4 + " )");
                            }else{
                                row8.drug_date = tempDate_tFileInputExcel_4;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_4+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_4 + " )");
					}
				}

			}else{
				row8.drug_date = null;
				emptyColumnCount_tFileInputExcel_4++;
			}
							columnIndex_tFileInputExcel_4 = 6;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "gpi";

				row8.gpi = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else{
				row8.gpi = null;
				emptyColumnCount_tFileInputExcel_4++;
			}

				nb_line_tFileInputExcel_4++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_4 = true;
					 System.err.println(e.getMessage());
					 row8 = null;
			}


		



 



/**
 * [tFileInputExcel_4 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 


	tos_count_tFileInputExcel_4++;

/**
 * [tFileInputExcel_4 main ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row5HashKey.patientid1 = row8.patientid1 ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
	
		  								forceLooprow5 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow5 = true;
			           		  	} // G 21
                    		  	
                    		

							row5Struct row5 = null;
                    		  	 
							

								while ((tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) || forceLooprow5) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row5'
									
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								
								if(!forceLooprow5) { // G 46
								
							
								 
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow5 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfDrug_Indicator_0 = null;

if(!rejectedInnerJoin_tMap_2 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'copyOfcopyOfcopyOfDrug_Indicator_0'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
copyOfcopyOfcopyOfDrug_Indicator_0_tmp.patientid1 = row8.patientid1 ;
copyOfcopyOfcopyOfDrug_Indicator_0_tmp.visit_date = row8.visit_date ;
copyOfcopyOfcopyOfDrug_Indicator_0_tmp.chlamydia_result = row8.chlamydia_result ;
copyOfcopyOfcopyOfDrug_Indicator_0_tmp.gonorrhea_result = row8.gonorrhea_result ;
copyOfcopyOfcopyOfDrug_Indicator_0_tmp.drug_description = row8.drug_description ;
copyOfcopyOfcopyOfDrug_Indicator_0_tmp.drug_date = row8.drug_date ;
copyOfcopyOfcopyOfDrug_Indicator_0_tmp.gpi = row8.gpi ;
copyOfcopyOfcopyOfDrug_Indicator_0 = copyOfcopyOfcopyOfDrug_Indicator_0_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "copyOfcopyOfcopyOfDrug_Indicator_0"
if(copyOfcopyOfcopyOfDrug_Indicator_0 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//copyOfcopyOfcopyOfDrug_Indicator_0
			//copyOfcopyOfcopyOfDrug_Indicator_0


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfcopyOfcopyOfDrug_Indicator_0"+iterateId,1, 1);
				} 
			

		
row9 = null;			
if(copyOfcopyOfcopyOfDrug_Indicator_0.patientid1 == null){
	finder_tUniqRow_1.patientid1 = null;
}else{
	finder_tUniqRow_1.patientid1 = copyOfcopyOfcopyOfDrug_Indicator_0.patientid1.toLowerCase();
}
finder_tUniqRow_1.visit_date = copyOfcopyOfcopyOfDrug_Indicator_0.visit_date;
if(copyOfcopyOfcopyOfDrug_Indicator_0.chlamydia_result == null){
	finder_tUniqRow_1.chlamydia_result = null;
}else{
	finder_tUniqRow_1.chlamydia_result = copyOfcopyOfcopyOfDrug_Indicator_0.chlamydia_result.toLowerCase();
}
if(copyOfcopyOfcopyOfDrug_Indicator_0.gonorrhea_result == null){
	finder_tUniqRow_1.gonorrhea_result = null;
}else{
	finder_tUniqRow_1.gonorrhea_result = copyOfcopyOfcopyOfDrug_Indicator_0.gonorrhea_result.toLowerCase();
}
if(copyOfcopyOfcopyOfDrug_Indicator_0.drug_description == null){
	finder_tUniqRow_1.drug_description = null;
}else{
	finder_tUniqRow_1.drug_description = copyOfcopyOfcopyOfDrug_Indicator_0.drug_description.toLowerCase();
}
finder_tUniqRow_1.drug_date = copyOfcopyOfcopyOfDrug_Indicator_0.drug_date;
if(copyOfcopyOfcopyOfDrug_Indicator_0.gpi == null){
	finder_tUniqRow_1.gpi = null;
}else{
	finder_tUniqRow_1.gpi = copyOfcopyOfcopyOfDrug_Indicator_0.gpi.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(copyOfcopyOfcopyOfDrug_Indicator_0.patientid1 == null){
	new_tUniqRow_1.patientid1 = null;
}else{
	new_tUniqRow_1.patientid1 = copyOfcopyOfcopyOfDrug_Indicator_0.patientid1.toLowerCase();
}
new_tUniqRow_1.visit_date = copyOfcopyOfcopyOfDrug_Indicator_0.visit_date;
if(copyOfcopyOfcopyOfDrug_Indicator_0.chlamydia_result == null){
	new_tUniqRow_1.chlamydia_result = null;
}else{
	new_tUniqRow_1.chlamydia_result = copyOfcopyOfcopyOfDrug_Indicator_0.chlamydia_result.toLowerCase();
}
if(copyOfcopyOfcopyOfDrug_Indicator_0.gonorrhea_result == null){
	new_tUniqRow_1.gonorrhea_result = null;
}else{
	new_tUniqRow_1.gonorrhea_result = copyOfcopyOfcopyOfDrug_Indicator_0.gonorrhea_result.toLowerCase();
}
if(copyOfcopyOfcopyOfDrug_Indicator_0.drug_description == null){
	new_tUniqRow_1.drug_description = null;
}else{
	new_tUniqRow_1.drug_description = copyOfcopyOfcopyOfDrug_Indicator_0.drug_description.toLowerCase();
}
new_tUniqRow_1.drug_date = copyOfcopyOfcopyOfDrug_Indicator_0.drug_date;
if(copyOfcopyOfcopyOfDrug_Indicator_0.gpi == null){
	new_tUniqRow_1.gpi = null;
}else{
	new_tUniqRow_1.gpi = copyOfcopyOfcopyOfDrug_Indicator_0.gpi.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row9 == null){ 
	
	row9 = new row9Struct();
}row9.patientid1 = copyOfcopyOfcopyOfDrug_Indicator_0.patientid1;			row9.visit_date = copyOfcopyOfcopyOfDrug_Indicator_0.visit_date;			row9.chlamydia_result = copyOfcopyOfcopyOfDrug_Indicator_0.chlamydia_result;			row9.gonorrhea_result = copyOfcopyOfcopyOfDrug_Indicator_0.gonorrhea_result;			row9.drug_description = copyOfcopyOfcopyOfDrug_Indicator_0.drug_description;			row9.drug_date = copyOfcopyOfcopyOfDrug_Indicator_0.drug_date;			row9.gpi = copyOfcopyOfcopyOfDrug_Indicator_0.gpi;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tSortRow_3_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		



	Comparablerow9Struct arrayRowtSortRow_3_SortOut = new Comparablerow9Struct();

	arrayRowtSortRow_3_SortOut.patientid1 = row9.patientid1;
	arrayRowtSortRow_3_SortOut.visit_date = row9.visit_date;
	arrayRowtSortRow_3_SortOut.chlamydia_result = row9.chlamydia_result;
	arrayRowtSortRow_3_SortOut.gonorrhea_result = row9.gonorrhea_result;
	arrayRowtSortRow_3_SortOut.drug_description = row9.drug_description;
	arrayRowtSortRow_3_SortOut.drug_date = row9.drug_date;
	arrayRowtSortRow_3_SortOut.gpi = row9.gpi;	
	list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

 


	tos_count_tSortRow_3_SortOut++;

/**
 * [tSortRow_3_SortOut main ] stop
 */

} // End of branch "row9"





} // End of branch "copyOfcopyOfcopyOfDrug_Indicator_0"



	
		} // close loop of lookup 'row5' // G_TM_M_043
	

} // End of branch "row8"




	
	/**
	 * [tFileInputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_4_NB_LINE",nb_line_tFileInputExcel_4);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_4 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_4.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_4", true);
end_Hash.put("tFileInputExcel_4", System.currentTimeMillis());




/**
 * [tFileInputExcel_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfcopyOfcopyOfDrug_Indicator_0"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tSortRow_3_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

row9Struct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut.toArray(new Comparablerow9Struct[0]);

java.util.Arrays.sort(array_tSortRow_3_SortOut);

globalMap.put("tSortRow_3",array_tSortRow_3_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_3_SortOut", true);
end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_3_SortOut end ] stop
 */



	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/Users/MadhumithaRavi/Desktop/HBH/Output/Patients_untreated_for_Gonorrhea_and_or_Chlamydia.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("patientid");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("testing_date");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("chlamydia_result");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("gonorrhea_result");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("drug_description");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("drug_date");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tSortRow_3_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_3_SortIn", false);
		start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	
		int tos_count_tSortRow_3_SortIn = 0;
		
    	class BytesLimit65535_tSortRow_3_SortIn{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_3_SortIn().limitLog4jByte();


row9Struct[] array_tSortRow_3_SortIn = (row9Struct[]) globalMap.get("tSortRow_3");

int nb_line_tSortRow_3_SortIn = 0;

row9Struct current_tSortRow_3_SortIn = null;

for(int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++){
	current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
	row11.patientid1 = current_tSortRow_3_SortIn.patientid1;
	row11.visit_date = current_tSortRow_3_SortIn.visit_date;
	row11.chlamydia_result = current_tSortRow_3_SortIn.chlamydia_result;
	row11.gonorrhea_result = current_tSortRow_3_SortIn.gonorrhea_result;
	row11.drug_description = current_tSortRow_3_SortIn.drug_description;
	row11.drug_date = current_tSortRow_3_SortIn.drug_date;
	row11.gpi = current_tSortRow_3_SortIn.gpi;
	// increase number of line sorted
	nb_line_tSortRow_3_SortIn++;

 



/**
 * [tSortRow_3_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_3_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 


	tos_count_tSortRow_3_SortIn++;

/**
 * [tSortRow_3_SortIn main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row12.patientid = row11.patientid1;
row12.testing_date = row11.visit_date;
row12.chlamydia_result = row11.chlamydia_result;
row12.gonorrhea_result = row11.gonorrhea_result;
row12.drug_description = row11.drug_description;
row12.drug_date = row11.drug_date;


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row12.patientid != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row12.patientid));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row12.testing_date != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(row12.testing_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row12.chlamydia_result != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row12.chlamydia_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row12.gonorrhea_result != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row12.gonorrhea_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row12.drug_description != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row12.drug_description));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row12.drug_date != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(row12.drug_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */






	
	/**
	 * [tSortRow_3_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	


}

globalMap.put("tSortRow_3_SortIn_NB_LINE",nb_line_tSortRow_3_SortIn);

 

ok_Hash.put("tSortRow_3_SortIn", true);
end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_3_SortIn end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

							columnIndex_tFileOutputExcel_1 = 0;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 1;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 2;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 3;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 4;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 5;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tFileInputExcel_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_3_SortIn"
							globalMap.remove("tSortRow_3");
						
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tSortRow_3_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

 



/**
 * [tSortRow_3_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_3_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 



/**
 * [tSortRow_3_SortIn finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_date = readDate(dis,ois);
					
						this.chlamydia_result = readString(dis,ois);
					
						this.gonorrhea_result = readString(dis,ois);
					
						this.drug_description = readString(dis,ois);
					
						this.drug_date = readDate(dis,ois);
					
						this.gpi = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.visit_date, dos, oos);
					
						writeString(this.chlamydia_result, dos, oos);
					
						writeString(this.gonorrhea_result, dos, oos);
					
						writeString(this.drug_description, dos, oos);
					
						writeDate(this.drug_date, dos, oos);
					
						writeString(this.gpi, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row5 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row5().limitLog4jByte();

			   		// connection name:row5
			   		// source node:tFileInputExcel_3 - inputs:(after_tFileInputExcel_4) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_2 - inputs:(row8,row5) outputs:(copyOfcopyOfcopyOfDrug_Indicator_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_3", false);
		start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_3";

	
		int tos_count_tFileInputExcel_3 = 0;
		
    	class BytesLimit65535_tFileInputExcel_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_3().limitLog4jByte();


			class RegexUtil_tFileInputExcel_3 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

		Object source_tFileInputExcel_3 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Lookup_Drugs_Present_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

		if(source_tFileInputExcel_3 instanceof String){
			workbook_tFileInputExcel_3 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_3);
		} else if(source_tFileInputExcel_3 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_3 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_3);
		} else{
			workbook_tFileInputExcel_3 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_3 : workbook_tFileInputExcel_3){
   			sheetList_tFileInputExcel_3.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_3);
    	}
    	if(sheetList_tFileInputExcel_3.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
			if(sheet_FilterNull_tFileInputExcel_3!=null && sheetList_FilterNull_tFileInputExcel_3.iterator()!=null && sheet_FilterNull_tFileInputExcel_3.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_3.add(sheet_FilterNull_tFileInputExcel_3);
			}
		}
		sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
	if(sheetList_tFileInputExcel_3.size()>0){
		int nb_line_tFileInputExcel_3 = 0;

        int begin_line_tFileInputExcel_3 = 0;

        int footer_input_tFileInputExcel_3 = 0;

        int end_line_tFileInputExcel_3=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3:sheetList_tFileInputExcel_3){
			end_line_tFileInputExcel_3+=(sheet_tFileInputExcel_3.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
        int limit_tFileInputExcel_3 = -1;
        int start_column_tFileInputExcel_3 = 1-1;
        int end_column_tFileInputExcel_3 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(0);
        int rowCount_tFileInputExcel_3 = 0;
        int sheetIndex_tFileInputExcel_3 = 0;
        int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++){

        	int emptyColumnCount_tFileInputExcel_3 = 0;

        	if (limit_tFileInputExcel_3 != -1 && nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
        		break;
        	}

            while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3 + currentRows_tFileInputExcel_3) {
                rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
                sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(++sheetIndex_tFileInputExcel_3);
                currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_3_CURRENT_SHEET",sheet_tFileInputExcel_3.getSheetName());
            if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
                row_tFileInputExcel_3 = sheet_tFileInputExcel_3.getRow(i_tFileInputExcel_3 - rowCount_tFileInputExcel_3);
            }
		    row5 = null;
		    row5 = null;
					int tempRowLength_tFileInputExcel_3 = 7;
				
				int columnIndex_tFileInputExcel_3 = 0;
			
			String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
			int excel_end_column_tFileInputExcel_3;
			if(row_tFileInputExcel_3==null){
				excel_end_column_tFileInputExcel_3=0;
			}else{
				excel_end_column_tFileInputExcel_3=row_tFileInputExcel_3.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_3;
			if(end_column_tFileInputExcel_3 == -1){
				actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
			}
			else{
				actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 >	excel_end_column_tFileInputExcel_3 ? excel_end_column_tFileInputExcel_3 : end_column_tFileInputExcel_3;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_3;i++){
				if(i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3.getCell(i + start_column_tFileInputExcel_3);
					if(cell_tFileInputExcel_3!=null){
					switch (cell_tFileInputExcel_3.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
									temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3.format(cell_tFileInputExcel_3.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_3.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
											temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_3.getNumericCellValue());
										temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_3[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_3[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_3[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_3[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_3 = false;
			row5 = new row5Struct();
			int curColNum_tFileInputExcel_3 = -1;
			String curColName_tFileInputExcel_3 = "";
			try{
							columnIndex_tFileInputExcel_3 = 0;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "patientid1";

				row5.patientid1 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row5.patientid1 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 1;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_3){
					try{
						if(row_tFileInputExcel_3.getCell(columnIndex_tFileInputExcel_3+ start_column_tFileInputExcel_3).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_3.getCell(columnIndex_tFileInputExcel_3+ start_column_tFileInputExcel_3))){
							row5.visit_date = row_tFileInputExcel_3.getCell(columnIndex_tFileInputExcel_3+ start_column_tFileInputExcel_3).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_3 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_3.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_3.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_3+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_3 + " )");
                            }else{
                                row5.visit_date = tempDate_tFileInputExcel_3;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_3+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_3 + " )");
					}
				}

			}else{
				row5.visit_date = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 2;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "chlamydia_result";

				row5.chlamydia_result = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row5.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 3;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "gonorrhea_result";

				row5.gonorrhea_result = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row5.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 4;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "drug_description";

				row5.drug_description = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row5.drug_description = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 5;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "drug_date";

				if(5<actual_end_column_tFileInputExcel_3){
					try{
						if(row_tFileInputExcel_3.getCell(columnIndex_tFileInputExcel_3+ start_column_tFileInputExcel_3).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_3.getCell(columnIndex_tFileInputExcel_3+ start_column_tFileInputExcel_3))){
							row5.drug_date = row_tFileInputExcel_3.getCell(columnIndex_tFileInputExcel_3+ start_column_tFileInputExcel_3).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_3 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_3.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_3.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_3+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_3 + " )");
                            }else{
                                row5.drug_date = tempDate_tFileInputExcel_3;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_3+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_3 + " )");
					}
				}

			}else{
				row5.drug_date = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 6;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "gpi";

				row5.gpi = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row5.gpi = null;
				emptyColumnCount_tFileInputExcel_3++;
			}

				nb_line_tFileInputExcel_3++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_3 = true;
					 System.err.println(e.getMessage());
					 row5 = null;
			}


		



 



/**
 * [tFileInputExcel_3 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 


	tos_count_tFileInputExcel_3++;

/**
 * [tFileInputExcel_3 main ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.patientid1 = row5.patientid1;
				
				row5_HashRow.visit_date = row5.visit_date;
				
				row5_HashRow.chlamydia_result = row5.chlamydia_result;
				
				row5_HashRow.gonorrhea_result = row5.gonorrhea_result;
				
				row5_HashRow.drug_description = row5.drug_description;
				
				row5_HashRow.drug_date = row5.drug_date;
				
				row5_HashRow.gpi = row5.gpi;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_3_NB_LINE",nb_line_tFileInputExcel_3);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_3 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_3.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_3", true);
end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());




/**
 * [tFileInputExcel_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class IndicatorStruct implements routines.system.IPersistableRow<IndicatorStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final IndicatorStruct other = (IndicatorStruct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(IndicatorStruct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(IndicatorStruct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(IndicatorStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid == null) ? 0 : this.patientid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.patientid == null) {
							if (other.patientid != null)
								return false;
						
						} else if (!this.patientid.equals(other.patientid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.patientid = this.patientid;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.patientid = this.patientid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid, other.patientid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_1Struct implements routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid == null) ? 0 : this.patientid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputExcel_1Struct other = (after_tFileInputExcel_1Struct) obj;
		
						if (this.patientid == null) {
							if (other.patientid != null)
								return false;
						
						} else if (!this.patientid.equals(other.patientid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputExcel_1Struct other) {

		other.patientid = this.patientid;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            
	}

	public void copyKeysDataTo(after_tFileInputExcel_1Struct other) {

		other.patientid = this.patientid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid, other.patientid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputExcel_2Process(globalMap);

		row1Struct row1 = new row1Struct();
row6Struct row6 = new row6Struct();
IndicatorStruct Indicator = new IndicatorStruct();
row4Struct row4 = new row4Struct();
row10Struct row10 = new row10Struct();








	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_2 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_2().limitLog4jByte();


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Temp_Post_Filter_Positive_Indicator.xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_2.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_2.setAppend(false,false);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("patientid1");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("visit_date");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("chlamydia_result");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("gonorrhea_result");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("drug_description");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("drug_date");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("gpi");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_4 = 0;
		
    	class BytesLimit65535_tFilterRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_4().limitLog4jByte();
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Indicator" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_3 = 0;
		
    	class BytesLimit65535_tFilterRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_3().limitLog4jByte();
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
IndicatorStruct Indicator_tmp = new IndicatorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tReplace_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_1", false);
		start_Hash.put("tReplace_1", System.currentTimeMillis());
		
	
	currentComponent="tReplace_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplace_1 = 0;
		
    	class BytesLimit65535_tReplace_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplace_1().limitLog4jByte();


int nb_line_tReplace_1 = 0;
 



/**
 * [tReplace_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		
    	class BytesLimit65535_tFileInputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();


			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = "C:/Users/MadhumithaRavi/Desktop/HBH/Input/Testing_data.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1){
   			sheetList_tFileInputExcel_1.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
    	}
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 0;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 4;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "patientid";

				row1.patientid = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.patientid = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_1){
					try{
						if(row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1+ start_column_tFileInputExcel_1).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1+ start_column_tFileInputExcel_1))){
							row1.visit_date = row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1+ start_column_tFileInputExcel_1).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_1 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_1.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_1.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
                            }else{
                                row1.visit_date = tempDate_tFileInputExcel_1;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
					}
				}

			}else{
				row1.visit_date = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "chlamydia_result";

				row1.chlamydia_result = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "gonorrhea_result";

				row1.gonorrhea_result = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tReplace_1 main ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

						String searchStr_tReplace_1_1 = null;
							row1.chlamydia_result = StringUtils.replaceAllStrictly(row1.chlamydia_result, searchStr_tReplace_1_1, "N/A" + "", true, false);
						String searchStr_tReplace_1_2 = null;
							row1.gonorrhea_result = StringUtils.replaceAllStrictly(row1.gonorrhea_result, searchStr_tReplace_1_2, "N/A" + "", true, false);
	        row6.patientid = row1.patientid;
	        
	        row6.visit_date = row1.visit_date;
	        
	        row6.chlamydia_result = row1.chlamydia_result;
	        
	        row6.gonorrhea_result = row1.gonorrhea_result;
	        
    nb_line_tReplace_1++;

 


	tos_count_tReplace_1++;

/**
 * [tReplace_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row7HashKey.patientid = row6.patientid;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow7 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow7 = true;
			           		  	} // G 21
                    		  	
                    		

							row7Struct row7 = null;
                    		  	 
							

								while ((tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) || forceLooprow7) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row7'
									
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								
								if(!forceLooprow7) { // G 46
								
							
								 
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow7 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Indicator = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'Indicator'
Indicator_tmp.patientid1 = row6.patientid;
Indicator_tmp.visit_date = row6.visit_date ;
Indicator_tmp.chlamydia_result = StringHandling.UPCASE(row6.chlamydia_result ) ;
Indicator_tmp.gonorrhea_result = StringHandling.UPCASE(row6.gonorrhea_result) ;
Indicator_tmp.drug_description = StringHandling.UPCASE(row7.drug_description) ;
Indicator_tmp.drug_date = row7.drug_date ;
Indicator_tmp.gpi = row7.gpi ;
Indicator = Indicator_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "Indicator"
if(Indicator != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

			//Indicator
			//Indicator


			
				if(execStat){
					runStat.updateStatOnConnection("Indicator"+iterateId,1, 1);
				} 
			

		

          row4 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("||");    
        ope_tFilterRow_3.matches((Indicator.chlamydia_result == null? false : Indicator.chlamydia_result.toUpperCase().compareTo("POSITIVE") == 0)
                       , " chlamydia_result.toUpperCase().compareTo(\"POSITIVE\") == 0 failed");    
        ope_tFilterRow_3.matches((Indicator.gonorrhea_result == null? false : Indicator.gonorrhea_result.toUpperCase().compareTo("POSITIVE") == 0)
                       , " gonorrhea_result.toUpperCase().compareTo(\"POSITIVE\") == 0 failed");    
        ope_tFilterRow_3.matches((Indicator.chlamydia_result == null? false : Indicator.chlamydia_result.toUpperCase().compareTo("DETECTED") == 0)
                       , " chlamydia_result.toUpperCase().compareTo(\"DETECTED\") == 0 failed");    
        ope_tFilterRow_3.matches((Indicator.gonorrhea_result == null? false : Indicator.gonorrhea_result.toUpperCase().compareTo("DETECTED") == 0)
                       , " gonorrhea_result.toUpperCase().compareTo(\"DETECTED\") == 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row4 == null){ 
                row4 = new row4Struct();
              }
               row4.patientid1 = Indicator.patientid1;
               row4.visit_date = Indicator.visit_date;
               row4.chlamydia_result = Indicator.chlamydia_result;
               row4.gonorrhea_result = Indicator.gonorrhea_result;
               row4.drug_description = Indicator.drug_description;
               row4.drug_date = Indicator.drug_date;
               row4.gpi = Indicator.gpi;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

          row10 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
      ope_tFilterRow_4.matches((row4.drug_date.compareTo(row4.visit_date) == 0 ||row4.drug_date.compareTo(row4.visit_date) == 1

), "advanced condition failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row10 == null){ 
                row10 = new row10Struct();
              }
               row10.patientid1 = row4.patientid1;
               row10.visit_date = row4.visit_date;
               row10.chlamydia_result = row4.chlamydia_result;
               row10.gonorrhea_result = row4.gonorrhea_result;
               row10.drug_description = row4.drug_description;
               row10.drug_date = row4.drug_date;
               row10.gpi = row4.gpi;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(row10.patientid1 != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row10.patientid1));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row10.visit_date != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(row10.visit_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row10.chlamydia_result != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row10.chlamydia_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row10.gonorrhea_result != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row10.gonorrhea_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row10.drug_description != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row10.drug_description));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row10.drug_date != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(row10.drug_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row10.gpi != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row10.gpi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */

} // End of branch "row10"





} // End of branch "row4"





} // End of branch "Indicator"



	
		} // close loop of lookup 'row7' // G_TM_M_043
	




} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tReplace_1 end ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	


globalMap.put("tReplace_1_NB_LINE",nb_line_tReplace_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplace_1", true);
end_Hash.put("tReplace_1", System.currentTimeMillis());




/**
 * [tReplace_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Indicator"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

							columnIndex_tFileOutputExcel_2 = 0;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 1;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 2;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 3;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 4;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 5;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
							columnIndex_tFileOutputExcel_2 = 6;
						
					xlsxTool_tFileOutputExcel_2.setColAutoSize(columnIndex_tFileOutputExcel_2);
	
	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputExcel_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tReplace_1 finally ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_2 other = (OnRowsEndStructtSortRow_2) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_2 other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_2 other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_2 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfDrug_IndicatorStruct implements routines.system.IPersistableRow<copyOfDrug_IndicatorStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfDrug_IndicatorStruct other = (copyOfDrug_IndicatorStruct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfDrug_IndicatorStruct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(copyOfDrug_IndicatorStruct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfDrug_IndicatorStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_7Struct implements routines.system.IPersistableRow<after_tFileInputExcel_7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputExcel_7Struct other = (after_tFileInputExcel_7Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputExcel_7Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(after_tFileInputExcel_7Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputExcel_8Process(globalMap);

		row15Struct row15 = new row15Struct();
copyOfDrug_IndicatorStruct copyOfDrug_Indicator = new copyOfDrug_IndicatorStruct();
row2Struct row2 = new row2Struct();
row17Struct row17 = new row17Struct();
row18Struct row18 = new row18Struct();
row19Struct row19 = new row19Struct();






	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_1_SortOut = 0;
		
    	class BytesLimit65535_tSortRow_1_SortOut{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_1_SortOut().limitLog4jByte();


class Comparablerow2Struct extends row2Struct implements Comparable<Comparablerow2Struct> {
	
	public int compareTo(Comparablerow2Struct other) {

		if(this.patientid1 == null && other.patientid1 != null){
			return -1;
						
		}else if(this.patientid1 != null && other.patientid1 == null){
			return 1;
						
		}else if(this.patientid1 != null && other.patientid1 != null){
			if(!this.patientid1.equals(other.patientid1)){
				return this.patientid1.compareTo(other.patientid1);
			}
		}
		if(this.visit_date == null && other.visit_date != null){
			return -1;
						
		}else if(this.visit_date != null && other.visit_date == null){
			return 1;
						
		}else if(this.visit_date != null && other.visit_date != null){
			if(!this.visit_date.equals(other.visit_date)){
				return this.visit_date.compareTo(other.visit_date);
			}
		}
		if(this.chlamydia_result == null && other.chlamydia_result != null){
			return -1;
						
		}else if(this.chlamydia_result != null && other.chlamydia_result == null){
			return 1;
						
		}else if(this.chlamydia_result != null && other.chlamydia_result != null){
			if(!this.chlamydia_result.equals(other.chlamydia_result)){
				return this.chlamydia_result.compareTo(other.chlamydia_result);
			}
		}
		if(this.gonorrhea_result == null && other.gonorrhea_result != null){
			return -1;
						
		}else if(this.gonorrhea_result != null && other.gonorrhea_result == null){
			return 1;
						
		}else if(this.gonorrhea_result != null && other.gonorrhea_result != null){
			if(!this.gonorrhea_result.equals(other.gonorrhea_result)){
				return this.gonorrhea_result.compareTo(other.gonorrhea_result);
			}
		}
		if(this.drug_description == null && other.drug_description != null){
			return -1;
						
		}else if(this.drug_description != null && other.drug_description == null){
			return 1;
						
		}else if(this.drug_description != null && other.drug_description != null){
			if(!this.drug_description.equals(other.drug_description)){
				return this.drug_description.compareTo(other.drug_description);
			}
		}
		if(this.drug_date == null && other.drug_date != null){
			return -1;
						
		}else if(this.drug_date != null && other.drug_date == null){
			return 1;
						
		}else if(this.drug_date != null && other.drug_date != null){
			if(!this.drug_date.equals(other.drug_date)){
				return this.drug_date.compareTo(other.drug_date);
			}
		}
		if(this.gpi == null && other.gpi != null){
			return -1;
						
		}else if(this.gpi != null && other.gpi == null){
			return 1;
						
		}else if(this.gpi != null && other.gpi != null){
			if(!this.gpi.equals(other.gpi)){
				return this.gpi.compareTo(other.gpi);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow2Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow2Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfDrug_Indicator" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_2 = 0;
		
    	class BytesLimit65535_tUniqRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_2().limitLog4jByte();

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String patientid1;
					java.util.Date visit_date;
					String chlamydia_result;
					String gonorrhea_result;
					String drug_description;
					java.util.Date drug_date;
					String gpi;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
								
								result = prime * result + ((this.visit_date == null) ? 0 : this.visit_date.hashCode());
								
								result = prime * result + ((this.chlamydia_result == null) ? 0 : this.chlamydia_result.hashCode());
								
								result = prime * result + ((this.gonorrhea_result == null) ? 0 : this.gonorrhea_result.hashCode());
								
								result = prime * result + ((this.drug_description == null) ? 0 : this.drug_description.hashCode());
								
								result = prime * result + ((this.drug_date == null) ? 0 : this.drug_date.hashCode());
								
								result = prime * result + ((this.gpi == null) ? 0 : this.gpi.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.patientid1 == null) {
										if (other.patientid1 != null) 
											return false;
								
									} else if (!this.patientid1.equals(other.patientid1))
								 
										return false;
								
									if (this.visit_date == null) {
										if (other.visit_date != null) 
											return false;
								
									} else if (!this.visit_date.equals(other.visit_date))
								 
										return false;
								
									if (this.chlamydia_result == null) {
										if (other.chlamydia_result != null) 
											return false;
								
									} else if (!this.chlamydia_result.equals(other.chlamydia_result))
								 
										return false;
								
									if (this.gonorrhea_result == null) {
										if (other.gonorrhea_result != null) 
											return false;
								
									} else if (!this.gonorrhea_result.equals(other.gonorrhea_result))
								 
										return false;
								
									if (this.drug_description == null) {
										if (other.drug_description != null) 
											return false;
								
									} else if (!this.drug_description.equals(other.drug_description))
								 
										return false;
								
									if (this.drug_date == null) {
										if (other.drug_date != null) 
											return false;
								
									} else if (!this.drug_date.equals(other.drug_date))
								 
										return false;
								
									if (this.gpi == null) {
										if (other.gpi != null) 
											return false;
								
									} else if (!this.gpi.equals(other.gpi))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		
    	class BytesLimit65535_tMap_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_4().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	
		tHash_Lookup_row16.initGet();
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfDrug_IndicatorStruct copyOfDrug_Indicator_tmp = new copyOfDrug_IndicatorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_7", false);
		start_Hash.put("tFileInputExcel_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_7";

	
		int tos_count_tFileInputExcel_7 = 0;
		
    	class BytesLimit65535_tFileInputExcel_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_7().limitLog4jByte();


			class RegexUtil_tFileInputExcel_7 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_7 regexUtil_tFileInputExcel_7 = new RegexUtil_tFileInputExcel_7();

		Object source_tFileInputExcel_7 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Temp_Post_Filter_Positive_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_7 = null;

		if(source_tFileInputExcel_7 instanceof String){
			workbook_tFileInputExcel_7 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_7);
		} else if(source_tFileInputExcel_7 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_7 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_7);
		} else{
			workbook_tFileInputExcel_7 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_7 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_7 : workbook_tFileInputExcel_7){
   			sheetList_tFileInputExcel_7.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_7);
    	}
    	if(sheetList_tFileInputExcel_7.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_7 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_7 : sheetList_tFileInputExcel_7) {
			if(sheet_FilterNull_tFileInputExcel_7!=null && sheetList_FilterNull_tFileInputExcel_7.iterator()!=null && sheet_FilterNull_tFileInputExcel_7.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_7.add(sheet_FilterNull_tFileInputExcel_7);
			}
		}
		sheetList_tFileInputExcel_7 = sheetList_FilterNull_tFileInputExcel_7;
	if(sheetList_tFileInputExcel_7.size()>0){
		int nb_line_tFileInputExcel_7 = 0;

        int begin_line_tFileInputExcel_7 = 0;

        int footer_input_tFileInputExcel_7 = 0;

        int end_line_tFileInputExcel_7=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_7:sheetList_tFileInputExcel_7){
			end_line_tFileInputExcel_7+=(sheet_tFileInputExcel_7.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_7 -= footer_input_tFileInputExcel_7;
        int limit_tFileInputExcel_7 = -1;
        int start_column_tFileInputExcel_7 = 1-1;
        int end_column_tFileInputExcel_7 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_7 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_7 = sheetList_tFileInputExcel_7.get(0);
        int rowCount_tFileInputExcel_7 = 0;
        int sheetIndex_tFileInputExcel_7 = 0;
        int currentRows_tFileInputExcel_7 = (sheetList_tFileInputExcel_7.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_7 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_7 = df_tFileInputExcel_7.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_7 = begin_line_tFileInputExcel_7; i_tFileInputExcel_7 < end_line_tFileInputExcel_7; i_tFileInputExcel_7++){

        	int emptyColumnCount_tFileInputExcel_7 = 0;

        	if (limit_tFileInputExcel_7 != -1 && nb_line_tFileInputExcel_7 >= limit_tFileInputExcel_7) {
        		break;
        	}

            while (i_tFileInputExcel_7 >= rowCount_tFileInputExcel_7 + currentRows_tFileInputExcel_7) {
                rowCount_tFileInputExcel_7 += currentRows_tFileInputExcel_7;
                sheet_tFileInputExcel_7 = sheetList_tFileInputExcel_7.get(++sheetIndex_tFileInputExcel_7);
                currentRows_tFileInputExcel_7 = (sheet_tFileInputExcel_7.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_7_CURRENT_SHEET",sheet_tFileInputExcel_7.getSheetName());
            if (rowCount_tFileInputExcel_7 <= i_tFileInputExcel_7) {
                row_tFileInputExcel_7 = sheet_tFileInputExcel_7.getRow(i_tFileInputExcel_7 - rowCount_tFileInputExcel_7);
            }
		    row15 = null;
					int tempRowLength_tFileInputExcel_7 = 7;
				
				int columnIndex_tFileInputExcel_7 = 0;
			
			String[] temp_row_tFileInputExcel_7 = new String[tempRowLength_tFileInputExcel_7];
			int excel_end_column_tFileInputExcel_7;
			if(row_tFileInputExcel_7==null){
				excel_end_column_tFileInputExcel_7=0;
			}else{
				excel_end_column_tFileInputExcel_7=row_tFileInputExcel_7.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_7;
			if(end_column_tFileInputExcel_7 == -1){
				actual_end_column_tFileInputExcel_7 = excel_end_column_tFileInputExcel_7;
			}
			else{
				actual_end_column_tFileInputExcel_7 = end_column_tFileInputExcel_7 >	excel_end_column_tFileInputExcel_7 ? excel_end_column_tFileInputExcel_7 : end_column_tFileInputExcel_7;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_7 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_7;i++){
				if(i + start_column_tFileInputExcel_7 < actual_end_column_tFileInputExcel_7){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_7 = row_tFileInputExcel_7.getCell(i + start_column_tFileInputExcel_7);
					if(cell_tFileInputExcel_7!=null){
					switch (cell_tFileInputExcel_7.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_7[i] = cell_tFileInputExcel_7.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_7)) {
									temp_row_tFileInputExcel_7[i] =cell_tFileInputExcel_7.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_7[i] = df_tFileInputExcel_7.format(cell_tFileInputExcel_7.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_7[i] =String.valueOf(cell_tFileInputExcel_7.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_7.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_7[i] = cell_tFileInputExcel_7.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_7)) {
											temp_row_tFileInputExcel_7[i] =cell_tFileInputExcel_7.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_7 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_7.getNumericCellValue());
										temp_row_tFileInputExcel_7[i] = ne_tFileInputExcel_7.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_7[i] =String.valueOf(cell_tFileInputExcel_7.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_7[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_7[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_7[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_7[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_7 = false;
			row15 = new row15Struct();
			int curColNum_tFileInputExcel_7 = -1;
			String curColName_tFileInputExcel_7 = "";
			try{
							columnIndex_tFileInputExcel_7 = 0;
						
			if( temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
				curColNum_tFileInputExcel_7=columnIndex_tFileInputExcel_7 + start_column_tFileInputExcel_7 + 1;
				curColName_tFileInputExcel_7 = "patientid1";

				row15.patientid1 = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
			}else{
				row15.patientid1 = null;
				emptyColumnCount_tFileInputExcel_7++;
			}
							columnIndex_tFileInputExcel_7 = 1;
						
			if( temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
				curColNum_tFileInputExcel_7=columnIndex_tFileInputExcel_7 + start_column_tFileInputExcel_7 + 1;
				curColName_tFileInputExcel_7 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_7){
					try{
						if(row_tFileInputExcel_7.getCell(columnIndex_tFileInputExcel_7+ start_column_tFileInputExcel_7).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_7.getCell(columnIndex_tFileInputExcel_7+ start_column_tFileInputExcel_7))){
							row15.visit_date = row_tFileInputExcel_7.getCell(columnIndex_tFileInputExcel_7+ start_column_tFileInputExcel_7).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_7 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_7.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_7.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_7+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_7 + " )");
                            }else{
                                row15.visit_date = tempDate_tFileInputExcel_7;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_7+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_7 + " )");
					}
				}

			}else{
				row15.visit_date = null;
				emptyColumnCount_tFileInputExcel_7++;
			}
							columnIndex_tFileInputExcel_7 = 2;
						
			if( temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
				curColNum_tFileInputExcel_7=columnIndex_tFileInputExcel_7 + start_column_tFileInputExcel_7 + 1;
				curColName_tFileInputExcel_7 = "chlamydia_result";

				row15.chlamydia_result = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
			}else{
				row15.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_7++;
			}
							columnIndex_tFileInputExcel_7 = 3;
						
			if( temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
				curColNum_tFileInputExcel_7=columnIndex_tFileInputExcel_7 + start_column_tFileInputExcel_7 + 1;
				curColName_tFileInputExcel_7 = "gonorrhea_result";

				row15.gonorrhea_result = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
			}else{
				row15.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_7++;
			}
							columnIndex_tFileInputExcel_7 = 4;
						
			if( temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
				curColNum_tFileInputExcel_7=columnIndex_tFileInputExcel_7 + start_column_tFileInputExcel_7 + 1;
				curColName_tFileInputExcel_7 = "drug_description";

				row15.drug_description = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
			}else{
				row15.drug_description = null;
				emptyColumnCount_tFileInputExcel_7++;
			}
							columnIndex_tFileInputExcel_7 = 5;
						
			if( temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
				curColNum_tFileInputExcel_7=columnIndex_tFileInputExcel_7 + start_column_tFileInputExcel_7 + 1;
				curColName_tFileInputExcel_7 = "drug_date";

				if(5<actual_end_column_tFileInputExcel_7){
					try{
						if(row_tFileInputExcel_7.getCell(columnIndex_tFileInputExcel_7+ start_column_tFileInputExcel_7).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_7.getCell(columnIndex_tFileInputExcel_7+ start_column_tFileInputExcel_7))){
							row15.drug_date = row_tFileInputExcel_7.getCell(columnIndex_tFileInputExcel_7+ start_column_tFileInputExcel_7).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_7 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_7.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_7.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_7+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_7 + " )");
                            }else{
                                row15.drug_date = tempDate_tFileInputExcel_7;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_7+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_7 + " )");
					}
				}

			}else{
				row15.drug_date = null;
				emptyColumnCount_tFileInputExcel_7++;
			}
							columnIndex_tFileInputExcel_7 = 6;
						
			if( temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
				curColNum_tFileInputExcel_7=columnIndex_tFileInputExcel_7 + start_column_tFileInputExcel_7 + 1;
				curColName_tFileInputExcel_7 = "gpi";

				row15.gpi = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
			}else{
				row15.gpi = null;
				emptyColumnCount_tFileInputExcel_7++;
			}

				nb_line_tFileInputExcel_7++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_7 = true;
					 System.err.println(e.getMessage());
					 row15 = null;
			}


		



 



/**
 * [tFileInputExcel_7 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_7";

	

 


	tos_count_tFileInputExcel_7++;

/**
 * [tFileInputExcel_7 main ] stop
 */
// Start of branch "row15"
if(row15 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow16 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow16 = true;
			           		  	} // G 21
                    		  	
                    		

							row16Struct row16 = null;
                    		  	 
							

								while ((tHash_Lookup_row16 != null && tHash_Lookup_row16.hasNext()) || forceLooprow16) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row16'
									
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								
								if(!forceLooprow16) { // G 46
								
							
								 
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow16 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfDrug_Indicator = null;


// # Output table : 'copyOfDrug_Indicator'
// # Filter conditions 
if( 

(row15.drug_description.contains(row16.Drug_Names))

 ) {
copyOfDrug_Indicator_tmp.patientid1 = row15.patientid1 ;
copyOfDrug_Indicator_tmp.visit_date = row15.visit_date ;
copyOfDrug_Indicator_tmp.chlamydia_result = row15.chlamydia_result ;
copyOfDrug_Indicator_tmp.gonorrhea_result = row15.gonorrhea_result ;
copyOfDrug_Indicator_tmp.drug_description = row15.drug_description ;
copyOfDrug_Indicator_tmp.drug_date = row15.drug_date ;
copyOfDrug_Indicator_tmp.gpi = row15.gpi ;
copyOfDrug_Indicator = copyOfDrug_Indicator_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
// Start of branch "copyOfDrug_Indicator"
if(copyOfDrug_Indicator != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

			//copyOfDrug_Indicator
			//copyOfDrug_Indicator


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfDrug_Indicator"+iterateId,1, 1);
				} 
			

		
row2 = null;			
if(copyOfDrug_Indicator.patientid1 == null){
	finder_tUniqRow_2.patientid1 = null;
}else{
	finder_tUniqRow_2.patientid1 = copyOfDrug_Indicator.patientid1.toLowerCase();
}
finder_tUniqRow_2.visit_date = copyOfDrug_Indicator.visit_date;
if(copyOfDrug_Indicator.chlamydia_result == null){
	finder_tUniqRow_2.chlamydia_result = null;
}else{
	finder_tUniqRow_2.chlamydia_result = copyOfDrug_Indicator.chlamydia_result.toLowerCase();
}
if(copyOfDrug_Indicator.gonorrhea_result == null){
	finder_tUniqRow_2.gonorrhea_result = null;
}else{
	finder_tUniqRow_2.gonorrhea_result = copyOfDrug_Indicator.gonorrhea_result.toLowerCase();
}
if(copyOfDrug_Indicator.drug_description == null){
	finder_tUniqRow_2.drug_description = null;
}else{
	finder_tUniqRow_2.drug_description = copyOfDrug_Indicator.drug_description.toLowerCase();
}
finder_tUniqRow_2.drug_date = copyOfDrug_Indicator.drug_date;
if(copyOfDrug_Indicator.gpi == null){
	finder_tUniqRow_2.gpi = null;
}else{
	finder_tUniqRow_2.gpi = copyOfDrug_Indicator.gpi.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(copyOfDrug_Indicator.patientid1 == null){
	new_tUniqRow_2.patientid1 = null;
}else{
	new_tUniqRow_2.patientid1 = copyOfDrug_Indicator.patientid1.toLowerCase();
}
new_tUniqRow_2.visit_date = copyOfDrug_Indicator.visit_date;
if(copyOfDrug_Indicator.chlamydia_result == null){
	new_tUniqRow_2.chlamydia_result = null;
}else{
	new_tUniqRow_2.chlamydia_result = copyOfDrug_Indicator.chlamydia_result.toLowerCase();
}
if(copyOfDrug_Indicator.gonorrhea_result == null){
	new_tUniqRow_2.gonorrhea_result = null;
}else{
	new_tUniqRow_2.gonorrhea_result = copyOfDrug_Indicator.gonorrhea_result.toLowerCase();
}
if(copyOfDrug_Indicator.drug_description == null){
	new_tUniqRow_2.drug_description = null;
}else{
	new_tUniqRow_2.drug_description = copyOfDrug_Indicator.drug_description.toLowerCase();
}
new_tUniqRow_2.drug_date = copyOfDrug_Indicator.drug_date;
if(copyOfDrug_Indicator.gpi == null){
	new_tUniqRow_2.gpi = null;
}else{
	new_tUniqRow_2.gpi = copyOfDrug_Indicator.gpi.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.patientid1 = copyOfDrug_Indicator.patientid1;			row2.visit_date = copyOfDrug_Indicator.visit_date;			row2.chlamydia_result = copyOfDrug_Indicator.chlamydia_result;			row2.gonorrhea_result = copyOfDrug_Indicator.gonorrhea_result;			row2.drug_description = copyOfDrug_Indicator.drug_description;			row2.drug_date = copyOfDrug_Indicator.drug_date;			row2.gpi = copyOfDrug_Indicator.gpi;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		



	Comparablerow2Struct arrayRowtSortRow_1_SortOut = new Comparablerow2Struct();

	arrayRowtSortRow_1_SortOut.patientid1 = row2.patientid1;
	arrayRowtSortRow_1_SortOut.visit_date = row2.visit_date;
	arrayRowtSortRow_1_SortOut.chlamydia_result = row2.chlamydia_result;
	arrayRowtSortRow_1_SortOut.gonorrhea_result = row2.gonorrhea_result;
	arrayRowtSortRow_1_SortOut.drug_description = row2.drug_description;
	arrayRowtSortRow_1_SortOut.drug_date = row2.drug_date;
	arrayRowtSortRow_1_SortOut.gpi = row2.gpi;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */

} // End of branch "row2"





} // End of branch "copyOfDrug_Indicator"



	
		} // close loop of lookup 'row16' // G_TM_M_043
	

} // End of branch "row15"




	
	/**
	 * [tFileInputExcel_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_7";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_7_NB_LINE",nb_line_tFileInputExcel_7);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_7 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_7.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_7", true);
end_Hash.put("tFileInputExcel_7", System.currentTimeMillis());




/**
 * [tFileInputExcel_7 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfDrug_Indicator"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

row2Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow2Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */


	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		
    	class BytesLimit65535_tAggregateRow_1_AGGOUT{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_1_AGGOUT().limitLog4jByte();

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String patientid1;
    				java.util.Date visit_date;
    				String chlamydia_result;
    				String gonorrhea_result;
    				String drug_description;
    				String gpi;
         			java.util.Date drug_date_max;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
							
							result = prime * result + ((this.visit_date == null) ? 0 : this.visit_date.hashCode());
							
							result = prime * result + ((this.chlamydia_result == null) ? 0 : this.chlamydia_result.hashCode());
							
							result = prime * result + ((this.gonorrhea_result == null) ? 0 : this.gonorrhea_result.hashCode());
							
							result = prime * result + ((this.drug_description == null) ? 0 : this.drug_description.hashCode());
							
							result = prime * result + ((this.gpi == null) ? 0 : this.gpi.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.patientid1 == null) {
								if (other.patientid1 != null) 
									return false;
							} else if (!this.patientid1.equals(other.patientid1)) 
								return false;
						
							if (this.visit_date == null) {
								if (other.visit_date != null) 
									return false;
							} else if (!this.visit_date.equals(other.visit_date)) 
								return false;
						
							if (this.chlamydia_result == null) {
								if (other.chlamydia_result != null) 
									return false;
							} else if (!this.chlamydia_result.equals(other.chlamydia_result)) 
								return false;
						
							if (this.gonorrhea_result == null) {
								if (other.gonorrhea_result != null) 
									return false;
							} else if (!this.gonorrhea_result.equals(other.gonorrhea_result)) 
								return false;
						
							if (this.drug_description == null) {
								if (other.drug_description != null) 
									return false;
							} else if (!this.drug_description.equals(other.drug_description)) 
								return false;
						
							if (this.gpi == null) {
								if (other.gpi != null) 
									return false;
							} else if (!this.gpi.equals(other.gpi)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		
    	class BytesLimit65535_tSortRow_1_SortIn{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_1_SortIn().limitLog4jByte();


row2Struct[] array_tSortRow_1_SortIn = (row2Struct[]) globalMap.get("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row2Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row17.patientid1 = current_tSortRow_1_SortIn.patientid1;
	row17.visit_date = current_tSortRow_1_SortIn.visit_date;
	row17.chlamydia_result = current_tSortRow_1_SortIn.chlamydia_result;
	row17.gonorrhea_result = current_tSortRow_1_SortIn.gonorrhea_result;
	row17.drug_description = current_tSortRow_1_SortIn.drug_description;
	row17.drug_date = current_tSortRow_1_SortIn.drug_date;
	row17.gpi = current_tSortRow_1_SortIn.gpi;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_1.patientid1 = row17.patientid1;
			operation_finder_tAggregateRow_1.visit_date = row17.visit_date;
			operation_finder_tAggregateRow_1.chlamydia_result = row17.chlamydia_result;
			operation_finder_tAggregateRow_1.gonorrhea_result = row17.gonorrhea_result;
			operation_finder_tAggregateRow_1.drug_description = row17.drug_description;
			operation_finder_tAggregateRow_1.gpi = row17.gpi;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	
		boolean isFirstAdd_tAggregateRow_1 = false;
	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.patientid1 = operation_finder_tAggregateRow_1.patientid1;
				operation_result_tAggregateRow_1.visit_date = operation_finder_tAggregateRow_1.visit_date;
				operation_result_tAggregateRow_1.chlamydia_result = operation_finder_tAggregateRow_1.chlamydia_result;
				operation_result_tAggregateRow_1.gonorrhea_result = operation_finder_tAggregateRow_1.gonorrhea_result;
				operation_result_tAggregateRow_1.drug_description = operation_finder_tAggregateRow_1.drug_description;
				operation_result_tAggregateRow_1.gpi = operation_finder_tAggregateRow_1.gpi;
				
		
		
			isFirstAdd_tAggregateRow_1 = true;
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(row17.drug_date != null) { // G_OutMain_AggR_546
				
					if( 
						
							operation_result_tAggregateRow_1.drug_date_max == null || row17.drug_date.compareTo(operation_result_tAggregateRow_1.drug_date_max) > 0
						
					) {
						operation_result_tAggregateRow_1.drug_date_max = row17.drug_date;
					}
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tSortRow_2_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortOut", false);
		start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_2_SortOut = 0;
		
    	class BytesLimit65535_tSortRow_2_SortOut{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_2_SortOut().limitLog4jByte();


class Comparablerow18Struct extends row18Struct implements Comparable<Comparablerow18Struct> {
	
	public int compareTo(Comparablerow18Struct other) {

		if(this.patientid1 == null && other.patientid1 != null){
			return -1;
						
		}else if(this.patientid1 != null && other.patientid1 == null){
			return 1;
						
		}else if(this.patientid1 != null && other.patientid1 != null){
			if(!this.patientid1.equals(other.patientid1)){
				return this.patientid1.compareTo(other.patientid1);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow18Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow18Struct>();


 



/**
 * [tSortRow_2_SortOut begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		
    	class BytesLimit65535_tAggregateRow_1_AGGIN{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAggregateRow_1_AGGIN().limitLog4jByte();

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row18.patientid1 = aggregated_row_tAggregateRow_1.patientid1;
            				    
            				    row18.visit_date = aggregated_row_tAggregateRow_1.visit_date;
            				    
            				    row18.chlamydia_result = aggregated_row_tAggregateRow_1.chlamydia_result;
            				    
            				    row18.gonorrhea_result = aggregated_row_tAggregateRow_1.gonorrhea_result;
            				    
            				    row18.drug_description = aggregated_row_tAggregateRow_1.drug_description;
            				    
                                row18.drug_date = aggregated_row_tAggregateRow_1.drug_date_max;
            				    row18.gpi = aggregated_row_tAggregateRow_1.gpi;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		



	Comparablerow18Struct arrayRowtSortRow_2_SortOut = new Comparablerow18Struct();

	arrayRowtSortRow_2_SortOut.patientid1 = row18.patientid1;
	arrayRowtSortRow_2_SortOut.visit_date = row18.visit_date;
	arrayRowtSortRow_2_SortOut.chlamydia_result = row18.chlamydia_result;
	arrayRowtSortRow_2_SortOut.gonorrhea_result = row18.gonorrhea_result;
	arrayRowtSortRow_2_SortOut.drug_description = row18.drug_description;
	arrayRowtSortRow_2_SortOut.drug_date = row18.drug_date;
	arrayRowtSortRow_2_SortOut.gpi = row18.gpi;	
	list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

 


	tos_count_tSortRow_2_SortOut++;

/**
 * [tSortRow_2_SortOut main ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

row18Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow18Struct[0]);

java.util.Arrays.sort(array_tSortRow_2_SortOut);

globalMap.put("tSortRow_2",array_tSortRow_2_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_2_SortOut", true);
end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_2_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_4 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_4().limitLog4jByte();


		int columnIndex_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4="C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Lookup_Drugs_Present_Indicator.xlsx";
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_4.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_4.setAppend(false,false);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_4.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
		
		xlsxTool_tFileOutputExcel_4.setFont("");
		
		if (xlsxTool_tFileOutputExcel_4.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_4.addRow();
		
		xlsxTool_tFileOutputExcel_4.addCellValue("patientid1");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("visit_date");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("chlamydia_result");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("gonorrhea_result");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("drug_description");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("drug_date");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("gpi");
		
		nb_line_tFileOutputExcel_4++; 
		
	}
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortIn", false);
		start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	
		int tos_count_tSortRow_2_SortIn = 0;
		
    	class BytesLimit65535_tSortRow_2_SortIn{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_2_SortIn().limitLog4jByte();


row18Struct[] array_tSortRow_2_SortIn = (row18Struct[]) globalMap.get("tSortRow_2");

int nb_line_tSortRow_2_SortIn = 0;

row18Struct current_tSortRow_2_SortIn = null;

for(int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++){
	current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
	row19.patientid1 = current_tSortRow_2_SortIn.patientid1;
	row19.visit_date = current_tSortRow_2_SortIn.visit_date;
	row19.chlamydia_result = current_tSortRow_2_SortIn.chlamydia_result;
	row19.gonorrhea_result = current_tSortRow_2_SortIn.gonorrhea_result;
	row19.drug_description = current_tSortRow_2_SortIn.drug_description;
	row19.drug_date = current_tSortRow_2_SortIn.drug_date;
	row19.gpi = current_tSortRow_2_SortIn.gpi;
	// increase number of line sorted
	nb_line_tSortRow_2_SortIn++;

 



/**
 * [tSortRow_2_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 


	tos_count_tSortRow_2_SortIn++;

/**
 * [tSortRow_2_SortIn main ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row19.patientid1 != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row19.patientid1));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row19.visit_date != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(row19.visit_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row19.chlamydia_result != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row19.chlamydia_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row19.gonorrhea_result != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row19.gonorrhea_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row19.drug_description != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row19.drug_description));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row19.drug_date != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(row19.drug_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row19.gpi != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row19.gpi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	


}

globalMap.put("tSortRow_2_SortIn_NB_LINE",nb_line_tSortRow_2_SortIn);

 

ok_Hash.put("tSortRow_2_SortIn", true);
end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_2_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

							columnIndex_tFileOutputExcel_4 = 0;
						
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
							columnIndex_tFileOutputExcel_4 = 1;
						
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
							columnIndex_tFileOutputExcel_4 = 2;
						
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
							columnIndex_tFileOutputExcel_4 = 3;
						
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
							columnIndex_tFileOutputExcel_4 = 4;
						
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
							columnIndex_tFileOutputExcel_4 = 5;
						
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
							columnIndex_tFileOutputExcel_4 = 6;
						
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		
			nb_line_tFileOutputExcel_4 = nb_line_tFileOutputExcel_4 -1;
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());




/**
 * [tFileOutputExcel_4 end ] stop
 */



























				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputExcel_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_2_SortIn"
							globalMap.remove("tSortRow_2");
						
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_7";

	

 



/**
 * [tFileInputExcel_7 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */



























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_7_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_7 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_7> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_7 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfDrug_Indicator_0Struct implements routines.system.IPersistableRow<copyOfcopyOfDrug_Indicator_0Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfDrug_Indicator_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_14Struct implements routines.system.IPersistableRow<after_tFileInputExcel_14Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputExcel_14Struct other = (after_tFileInputExcel_14Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputExcel_14Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(after_tFileInputExcel_14Struct other) {

		other.patientid1 = this.patientid1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.chlamydia_result = readString(dis);
					
					this.gonorrhea_result = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.chlamydia_result,dos);
					
					// String
				
						writeString(this.gonorrhea_result,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputExcel_15Process(globalMap);

		row41Struct row41 = new row41Struct();
copyOfcopyOfDrug_Indicator_0Struct copyOfcopyOfDrug_Indicator_0 = new copyOfcopyOfDrug_Indicator_0Struct();
row43Struct row43 = new row43Struct();
row31Struct row31 = new row31Struct();






	
	/**
	 * [tSortRow_7_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_7_SortOut", false);
		start_Hash.put("tSortRow_7_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortOut";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row43" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSortRow_7_SortOut = 0;
		
    	class BytesLimit65535_tSortRow_7_SortOut{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_7_SortOut().limitLog4jByte();


class Comparablerow43Struct extends row43Struct implements Comparable<Comparablerow43Struct> {
	
	public int compareTo(Comparablerow43Struct other) {

		if(this.patientid1 == null && other.patientid1 != null){
			return -1;
						
		}else if(this.patientid1 != null && other.patientid1 == null){
			return 1;
						
		}else if(this.patientid1 != null && other.patientid1 != null){
			if(!this.patientid1.equals(other.patientid1)){
				return this.patientid1.compareTo(other.patientid1);
			}
		}
		if(this.visit_date == null && other.visit_date != null){
			return -1;
						
		}else if(this.visit_date != null && other.visit_date == null){
			return 1;
						
		}else if(this.visit_date != null && other.visit_date != null){
			if(!this.visit_date.equals(other.visit_date)){
				return this.visit_date.compareTo(other.visit_date);
			}
		}
		if(this.chlamydia_result == null && other.chlamydia_result != null){
			return -1;
						
		}else if(this.chlamydia_result != null && other.chlamydia_result == null){
			return 1;
						
		}else if(this.chlamydia_result != null && other.chlamydia_result != null){
			if(!this.chlamydia_result.equals(other.chlamydia_result)){
				return this.chlamydia_result.compareTo(other.chlamydia_result);
			}
		}
		if(this.gonorrhea_result == null && other.gonorrhea_result != null){
			return -1;
						
		}else if(this.gonorrhea_result != null && other.gonorrhea_result == null){
			return 1;
						
		}else if(this.gonorrhea_result != null && other.gonorrhea_result != null){
			if(!this.gonorrhea_result.equals(other.gonorrhea_result)){
				return this.gonorrhea_result.compareTo(other.gonorrhea_result);
			}
		}
		if(this.drug_description == null && other.drug_description != null){
			return -1;
						
		}else if(this.drug_description != null && other.drug_description == null){
			return 1;
						
		}else if(this.drug_description != null && other.drug_description != null){
			if(!this.drug_description.equals(other.drug_description)){
				return this.drug_description.compareTo(other.drug_description);
			}
		}
		if(this.drug_date == null && other.drug_date != null){
			return -1;
						
		}else if(this.drug_date != null && other.drug_date == null){
			return 1;
						
		}else if(this.drug_date != null && other.drug_date != null){
			if(!this.drug_date.equals(other.drug_date)){
				return this.drug_date.compareTo(other.drug_date);
			}
		}
		if(this.gpi == null && other.gpi != null){
			return -1;
						
		}else if(this.gpi != null && other.gpi == null){
			return 1;
						
		}else if(this.gpi != null && other.gpi != null){
			if(!this.gpi.equals(other.gpi)){
				return this.gpi.compareTo(other.gpi);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow43Struct> list_tSortRow_7_SortOut = new java.util.ArrayList<Comparablerow43Struct>();


 



/**
 * [tSortRow_7_SortOut begin ] stop
 */



	
	/**
	 * [tUniqRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_8", false);
		start_Hash.put("tUniqRow_8", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfcopyOfDrug_Indicator_0" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_8 = 0;
		
    	class BytesLimit65535_tUniqRow_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tUniqRow_8().limitLog4jByte();

	
		class KeyStruct_tUniqRow_8 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String patientid1;
					java.util.Date visit_date;
					String chlamydia_result;
					String gonorrhea_result;
					String drug_description;
					java.util.Date drug_date;
					String gpi;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
								
								result = prime * result + ((this.visit_date == null) ? 0 : this.visit_date.hashCode());
								
								result = prime * result + ((this.chlamydia_result == null) ? 0 : this.chlamydia_result.hashCode());
								
								result = prime * result + ((this.gonorrhea_result == null) ? 0 : this.gonorrhea_result.hashCode());
								
								result = prime * result + ((this.drug_description == null) ? 0 : this.drug_description.hashCode());
								
								result = prime * result + ((this.drug_date == null) ? 0 : this.drug_date.hashCode());
								
								result = prime * result + ((this.gpi == null) ? 0 : this.gpi.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;
				
									if (this.patientid1 == null) {
										if (other.patientid1 != null) 
											return false;
								
									} else if (!this.patientid1.equals(other.patientid1))
								 
										return false;
								
									if (this.visit_date == null) {
										if (other.visit_date != null) 
											return false;
								
									} else if (!this.visit_date.equals(other.visit_date))
								 
										return false;
								
									if (this.chlamydia_result == null) {
										if (other.chlamydia_result != null) 
											return false;
								
									} else if (!this.chlamydia_result.equals(other.chlamydia_result))
								 
										return false;
								
									if (this.gonorrhea_result == null) {
										if (other.gonorrhea_result != null) 
											return false;
								
									} else if (!this.gonorrhea_result.equals(other.gonorrhea_result))
								 
										return false;
								
									if (this.drug_description == null) {
										if (other.drug_description != null) 
											return false;
								
									} else if (!this.drug_description.equals(other.drug_description))
								 
										return false;
								
									if (this.drug_date == null) {
										if (other.drug_date != null) 
											return false;
								
									} else if (!this.drug_date.equals(other.drug_date))
								 
										return false;
								
									if (this.gpi == null) {
										if (other.gpi != null) 
											return false;
								
									} else if (!this.gpi.equals(other.gpi))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_8 = 0;
int nb_duplicates_tUniqRow_8 = 0;
KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>(); 

 



/**
 * [tUniqRow_8 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row41" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_6 = 0;
		
    	class BytesLimit65535_tMap_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_6().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
					globalMap.get( "tHash_Lookup_row42" ))
					;					
					
	

row42Struct row42HashKey = new row42Struct();
row42Struct row42Default = new row42Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfDrug_Indicator_0Struct copyOfcopyOfDrug_Indicator_0_tmp = new copyOfcopyOfDrug_Indicator_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_14", false);
		start_Hash.put("tFileInputExcel_14", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_14";

	
		int tos_count_tFileInputExcel_14 = 0;
		
    	class BytesLimit65535_tFileInputExcel_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_14().limitLog4jByte();


			class RegexUtil_tFileInputExcel_14 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_14 regexUtil_tFileInputExcel_14 = new RegexUtil_tFileInputExcel_14();

		Object source_tFileInputExcel_14 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Temp_Post_Filter_Positive_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_14 = null;

		if(source_tFileInputExcel_14 instanceof String){
			workbook_tFileInputExcel_14 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_14);
		} else if(source_tFileInputExcel_14 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_14 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_14);
		} else{
			workbook_tFileInputExcel_14 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_14 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_14 : workbook_tFileInputExcel_14){
   			sheetList_tFileInputExcel_14.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_14);
    	}
    	if(sheetList_tFileInputExcel_14.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_14 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_14 : sheetList_tFileInputExcel_14) {
			if(sheet_FilterNull_tFileInputExcel_14!=null && sheetList_FilterNull_tFileInputExcel_14.iterator()!=null && sheet_FilterNull_tFileInputExcel_14.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_14.add(sheet_FilterNull_tFileInputExcel_14);
			}
		}
		sheetList_tFileInputExcel_14 = sheetList_FilterNull_tFileInputExcel_14;
	if(sheetList_tFileInputExcel_14.size()>0){
		int nb_line_tFileInputExcel_14 = 0;

        int begin_line_tFileInputExcel_14 = 0;

        int footer_input_tFileInputExcel_14 = 0;

        int end_line_tFileInputExcel_14=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_14:sheetList_tFileInputExcel_14){
			end_line_tFileInputExcel_14+=(sheet_tFileInputExcel_14.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_14 -= footer_input_tFileInputExcel_14;
        int limit_tFileInputExcel_14 = -1;
        int start_column_tFileInputExcel_14 = 1-1;
        int end_column_tFileInputExcel_14 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_14 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_14 = sheetList_tFileInputExcel_14.get(0);
        int rowCount_tFileInputExcel_14 = 0;
        int sheetIndex_tFileInputExcel_14 = 0;
        int currentRows_tFileInputExcel_14 = (sheetList_tFileInputExcel_14.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_14 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_14 = df_tFileInputExcel_14.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_14 = begin_line_tFileInputExcel_14; i_tFileInputExcel_14 < end_line_tFileInputExcel_14; i_tFileInputExcel_14++){

        	int emptyColumnCount_tFileInputExcel_14 = 0;

        	if (limit_tFileInputExcel_14 != -1 && nb_line_tFileInputExcel_14 >= limit_tFileInputExcel_14) {
        		break;
        	}

            while (i_tFileInputExcel_14 >= rowCount_tFileInputExcel_14 + currentRows_tFileInputExcel_14) {
                rowCount_tFileInputExcel_14 += currentRows_tFileInputExcel_14;
                sheet_tFileInputExcel_14 = sheetList_tFileInputExcel_14.get(++sheetIndex_tFileInputExcel_14);
                currentRows_tFileInputExcel_14 = (sheet_tFileInputExcel_14.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_14_CURRENT_SHEET",sheet_tFileInputExcel_14.getSheetName());
            if (rowCount_tFileInputExcel_14 <= i_tFileInputExcel_14) {
                row_tFileInputExcel_14 = sheet_tFileInputExcel_14.getRow(i_tFileInputExcel_14 - rowCount_tFileInputExcel_14);
            }
		    row41 = null;
					int tempRowLength_tFileInputExcel_14 = 7;
				
				int columnIndex_tFileInputExcel_14 = 0;
			
			String[] temp_row_tFileInputExcel_14 = new String[tempRowLength_tFileInputExcel_14];
			int excel_end_column_tFileInputExcel_14;
			if(row_tFileInputExcel_14==null){
				excel_end_column_tFileInputExcel_14=0;
			}else{
				excel_end_column_tFileInputExcel_14=row_tFileInputExcel_14.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_14;
			if(end_column_tFileInputExcel_14 == -1){
				actual_end_column_tFileInputExcel_14 = excel_end_column_tFileInputExcel_14;
			}
			else{
				actual_end_column_tFileInputExcel_14 = end_column_tFileInputExcel_14 >	excel_end_column_tFileInputExcel_14 ? excel_end_column_tFileInputExcel_14 : end_column_tFileInputExcel_14;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_14 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_14;i++){
				if(i + start_column_tFileInputExcel_14 < actual_end_column_tFileInputExcel_14){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_14 = row_tFileInputExcel_14.getCell(i + start_column_tFileInputExcel_14);
					if(cell_tFileInputExcel_14!=null){
					switch (cell_tFileInputExcel_14.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_14[i] = cell_tFileInputExcel_14.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_14)) {
									temp_row_tFileInputExcel_14[i] =cell_tFileInputExcel_14.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_14[i] = df_tFileInputExcel_14.format(cell_tFileInputExcel_14.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_14[i] =String.valueOf(cell_tFileInputExcel_14.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_14.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_14[i] = cell_tFileInputExcel_14.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_14)) {
											temp_row_tFileInputExcel_14[i] =cell_tFileInputExcel_14.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_14 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_14.getNumericCellValue());
										temp_row_tFileInputExcel_14[i] = ne_tFileInputExcel_14.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_14[i] =String.valueOf(cell_tFileInputExcel_14.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_14[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_14[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_14[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_14[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_14 = false;
			row41 = new row41Struct();
			int curColNum_tFileInputExcel_14 = -1;
			String curColName_tFileInputExcel_14 = "";
			try{
							columnIndex_tFileInputExcel_14 = 0;
						
			if( temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14].length() > 0) {
				curColNum_tFileInputExcel_14=columnIndex_tFileInputExcel_14 + start_column_tFileInputExcel_14 + 1;
				curColName_tFileInputExcel_14 = "patientid1";

				row41.patientid1 = temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14];
			}else{
				row41.patientid1 = null;
				emptyColumnCount_tFileInputExcel_14++;
			}
							columnIndex_tFileInputExcel_14 = 1;
						
			if( temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14].length() > 0) {
				curColNum_tFileInputExcel_14=columnIndex_tFileInputExcel_14 + start_column_tFileInputExcel_14 + 1;
				curColName_tFileInputExcel_14 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_14){
					try{
						if(row_tFileInputExcel_14.getCell(columnIndex_tFileInputExcel_14+ start_column_tFileInputExcel_14).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_14.getCell(columnIndex_tFileInputExcel_14+ start_column_tFileInputExcel_14))){
							row41.visit_date = row_tFileInputExcel_14.getCell(columnIndex_tFileInputExcel_14+ start_column_tFileInputExcel_14).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_14 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_14.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_14.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_14+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_14 + " )");
                            }else{
                                row41.visit_date = tempDate_tFileInputExcel_14;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_14+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_14 + " )");
					}
				}

			}else{
				row41.visit_date = null;
				emptyColumnCount_tFileInputExcel_14++;
			}
							columnIndex_tFileInputExcel_14 = 2;
						
			if( temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14].length() > 0) {
				curColNum_tFileInputExcel_14=columnIndex_tFileInputExcel_14 + start_column_tFileInputExcel_14 + 1;
				curColName_tFileInputExcel_14 = "chlamydia_result";

				row41.chlamydia_result = temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14];
			}else{
				row41.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_14++;
			}
							columnIndex_tFileInputExcel_14 = 3;
						
			if( temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14].length() > 0) {
				curColNum_tFileInputExcel_14=columnIndex_tFileInputExcel_14 + start_column_tFileInputExcel_14 + 1;
				curColName_tFileInputExcel_14 = "gonorrhea_result";

				row41.gonorrhea_result = temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14];
			}else{
				row41.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_14++;
			}
							columnIndex_tFileInputExcel_14 = 4;
						
			if( temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14].length() > 0) {
				curColNum_tFileInputExcel_14=columnIndex_tFileInputExcel_14 + start_column_tFileInputExcel_14 + 1;
				curColName_tFileInputExcel_14 = "drug_description";

				row41.drug_description = temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14];
			}else{
				row41.drug_description = null;
				emptyColumnCount_tFileInputExcel_14++;
			}
							columnIndex_tFileInputExcel_14 = 5;
						
			if( temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14].length() > 0) {
				curColNum_tFileInputExcel_14=columnIndex_tFileInputExcel_14 + start_column_tFileInputExcel_14 + 1;
				curColName_tFileInputExcel_14 = "drug_date";

				if(5<actual_end_column_tFileInputExcel_14){
					try{
						if(row_tFileInputExcel_14.getCell(columnIndex_tFileInputExcel_14+ start_column_tFileInputExcel_14).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_14.getCell(columnIndex_tFileInputExcel_14+ start_column_tFileInputExcel_14))){
							row41.drug_date = row_tFileInputExcel_14.getCell(columnIndex_tFileInputExcel_14+ start_column_tFileInputExcel_14).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_14 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_14.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_14.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_14+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_14 + " )");
                            }else{
                                row41.drug_date = tempDate_tFileInputExcel_14;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_14+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_14 + " )");
					}
				}

			}else{
				row41.drug_date = null;
				emptyColumnCount_tFileInputExcel_14++;
			}
							columnIndex_tFileInputExcel_14 = 6;
						
			if( temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14].length() > 0) {
				curColNum_tFileInputExcel_14=columnIndex_tFileInputExcel_14 + start_column_tFileInputExcel_14 + 1;
				curColName_tFileInputExcel_14 = "gpi";

				row41.gpi = temp_row_tFileInputExcel_14[columnIndex_tFileInputExcel_14];
			}else{
				row41.gpi = null;
				emptyColumnCount_tFileInputExcel_14++;
			}

				nb_line_tFileInputExcel_14++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_14 = true;
					 System.err.println(e.getMessage());
					 row41 = null;
			}


		



 



/**
 * [tFileInputExcel_14 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_14 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_14";

	

 


	tos_count_tFileInputExcel_14++;

/**
 * [tFileInputExcel_14 main ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

			//row41
			//row41


			
				if(execStat){
					runStat.updateStatOnConnection("row41"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		row42HashKey.patientid1 = row41.patientid1 ;
                        		    		
                        		    		row42HashKey.visit_date = row41.visit_date ;
                        		    		
                        		    		row42HashKey.drug_description = row41.drug_description ;
                        		    		

								
		                        	row42HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfDrug_Indicator_0 = null;

if(!rejectedInnerJoin_tMap_6 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'copyOfcopyOfDrug_Indicator_0'
// # Filter conditions 
if( rejectedInnerJoin_tMap_6 ) {
copyOfcopyOfDrug_Indicator_0_tmp.patientid1 = row41.patientid1 ;
copyOfcopyOfDrug_Indicator_0_tmp.visit_date = row41.visit_date ;
copyOfcopyOfDrug_Indicator_0_tmp.chlamydia_result = row41.chlamydia_result ;
copyOfcopyOfDrug_Indicator_0_tmp.gonorrhea_result = row41.gonorrhea_result ;
copyOfcopyOfDrug_Indicator_0_tmp.drug_description = row41.drug_description ;
copyOfcopyOfDrug_Indicator_0_tmp.drug_date = row41.drug_date ;
copyOfcopyOfDrug_Indicator_0_tmp.gpi = row41.gpi ;
copyOfcopyOfDrug_Indicator_0 = copyOfcopyOfDrug_Indicator_0_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
// Start of branch "copyOfcopyOfDrug_Indicator_0"
if(copyOfcopyOfDrug_Indicator_0 != null) { 



	
	/**
	 * [tUniqRow_8 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

			//copyOfcopyOfDrug_Indicator_0
			//copyOfcopyOfDrug_Indicator_0


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfcopyOfDrug_Indicator_0"+iterateId,1, 1);
				} 
			

		
row43 = null;			
if(copyOfcopyOfDrug_Indicator_0.patientid1 == null){
	finder_tUniqRow_8.patientid1 = null;
}else{
	finder_tUniqRow_8.patientid1 = copyOfcopyOfDrug_Indicator_0.patientid1.toLowerCase();
}
finder_tUniqRow_8.visit_date = copyOfcopyOfDrug_Indicator_0.visit_date;
if(copyOfcopyOfDrug_Indicator_0.chlamydia_result == null){
	finder_tUniqRow_8.chlamydia_result = null;
}else{
	finder_tUniqRow_8.chlamydia_result = copyOfcopyOfDrug_Indicator_0.chlamydia_result.toLowerCase();
}
if(copyOfcopyOfDrug_Indicator_0.gonorrhea_result == null){
	finder_tUniqRow_8.gonorrhea_result = null;
}else{
	finder_tUniqRow_8.gonorrhea_result = copyOfcopyOfDrug_Indicator_0.gonorrhea_result.toLowerCase();
}
if(copyOfcopyOfDrug_Indicator_0.drug_description == null){
	finder_tUniqRow_8.drug_description = null;
}else{
	finder_tUniqRow_8.drug_description = copyOfcopyOfDrug_Indicator_0.drug_description.toLowerCase();
}
finder_tUniqRow_8.drug_date = copyOfcopyOfDrug_Indicator_0.drug_date;
if(copyOfcopyOfDrug_Indicator_0.gpi == null){
	finder_tUniqRow_8.gpi = null;
}else{
	finder_tUniqRow_8.gpi = copyOfcopyOfDrug_Indicator_0.gpi.toLowerCase();
}	
finder_tUniqRow_8.hashCodeDirty = true;
if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
		KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

		
if(copyOfcopyOfDrug_Indicator_0.patientid1 == null){
	new_tUniqRow_8.patientid1 = null;
}else{
	new_tUniqRow_8.patientid1 = copyOfcopyOfDrug_Indicator_0.patientid1.toLowerCase();
}
new_tUniqRow_8.visit_date = copyOfcopyOfDrug_Indicator_0.visit_date;
if(copyOfcopyOfDrug_Indicator_0.chlamydia_result == null){
	new_tUniqRow_8.chlamydia_result = null;
}else{
	new_tUniqRow_8.chlamydia_result = copyOfcopyOfDrug_Indicator_0.chlamydia_result.toLowerCase();
}
if(copyOfcopyOfDrug_Indicator_0.gonorrhea_result == null){
	new_tUniqRow_8.gonorrhea_result = null;
}else{
	new_tUniqRow_8.gonorrhea_result = copyOfcopyOfDrug_Indicator_0.gonorrhea_result.toLowerCase();
}
if(copyOfcopyOfDrug_Indicator_0.drug_description == null){
	new_tUniqRow_8.drug_description = null;
}else{
	new_tUniqRow_8.drug_description = copyOfcopyOfDrug_Indicator_0.drug_description.toLowerCase();
}
new_tUniqRow_8.drug_date = copyOfcopyOfDrug_Indicator_0.drug_date;
if(copyOfcopyOfDrug_Indicator_0.gpi == null){
	new_tUniqRow_8.gpi = null;
}else{
	new_tUniqRow_8.gpi = copyOfcopyOfDrug_Indicator_0.gpi.toLowerCase();
}
		
		keystUniqRow_8.add(new_tUniqRow_8);if(row43 == null){ 
	
	row43 = new row43Struct();
}row43.patientid1 = copyOfcopyOfDrug_Indicator_0.patientid1;			row43.visit_date = copyOfcopyOfDrug_Indicator_0.visit_date;			row43.chlamydia_result = copyOfcopyOfDrug_Indicator_0.chlamydia_result;			row43.gonorrhea_result = copyOfcopyOfDrug_Indicator_0.gonorrhea_result;			row43.drug_description = copyOfcopyOfDrug_Indicator_0.drug_description;			row43.drug_date = copyOfcopyOfDrug_Indicator_0.drug_date;			row43.gpi = copyOfcopyOfDrug_Indicator_0.gpi;					
		nb_uniques_tUniqRow_8++;
	} else {
	  nb_duplicates_tUniqRow_8++;
	}

 


	tos_count_tUniqRow_8++;

/**
 * [tUniqRow_8 main ] stop
 */
// Start of branch "row43"
if(row43 != null) { 



	
	/**
	 * [tSortRow_7_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortOut";

	

			//row43
			//row43


			
				if(execStat){
					runStat.updateStatOnConnection("row43"+iterateId,1, 1);
				} 
			

		



	Comparablerow43Struct arrayRowtSortRow_7_SortOut = new Comparablerow43Struct();

	arrayRowtSortRow_7_SortOut.patientid1 = row43.patientid1;
	arrayRowtSortRow_7_SortOut.visit_date = row43.visit_date;
	arrayRowtSortRow_7_SortOut.chlamydia_result = row43.chlamydia_result;
	arrayRowtSortRow_7_SortOut.gonorrhea_result = row43.gonorrhea_result;
	arrayRowtSortRow_7_SortOut.drug_description = row43.drug_description;
	arrayRowtSortRow_7_SortOut.drug_date = row43.drug_date;
	arrayRowtSortRow_7_SortOut.gpi = row43.gpi;	
	list_tSortRow_7_SortOut.add(arrayRowtSortRow_7_SortOut);

 


	tos_count_tSortRow_7_SortOut++;

/**
 * [tSortRow_7_SortOut main ] stop
 */

} // End of branch "row43"





} // End of branch "copyOfcopyOfDrug_Indicator_0"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	

} // End of branch "row41"




	
	/**
	 * [tFileInputExcel_14 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_14";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_14_NB_LINE",nb_line_tFileInputExcel_14);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_14 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_14.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_14", true);
end_Hash.put("tFileInputExcel_14", System.currentTimeMillis());




/**
 * [tFileInputExcel_14 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row42 != null) {
						tHash_Lookup_row42.endGet();
					}
					globalMap.remove( "tHash_Lookup_row42" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row41"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tUniqRow_8 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

globalMap.put("tUniqRow_8_NB_UNIQUES",nb_uniques_tUniqRow_8);
globalMap.put("tUniqRow_8_NB_DUPLICATES",nb_duplicates_tUniqRow_8);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfcopyOfDrug_Indicator_0"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_8", true);
end_Hash.put("tUniqRow_8", System.currentTimeMillis());




/**
 * [tUniqRow_8 end ] stop
 */

	
	/**
	 * [tSortRow_7_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortOut";

	

row43Struct[] array_tSortRow_7_SortOut = list_tSortRow_7_SortOut.toArray(new Comparablerow43Struct[0]);

java.util.Arrays.sort(array_tSortRow_7_SortOut);

globalMap.put("tSortRow_7",array_tSortRow_7_SortOut);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row43"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSortRow_7_SortOut", true);
end_Hash.put("tSortRow_7_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_7_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputExcel_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_12", false);
		start_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row31" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_12 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_12().limitLog4jByte();


		int columnIndex_tFileOutputExcel_12 = 0;
		
		String fileName_tFileOutputExcel_12="C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Lookup_Drugs_Absent_Indicator.xlsx";
		int nb_line_tFileOutputExcel_12 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_12 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_12.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_12.setAppend(false,false);
		xlsxTool_tFileOutputExcel_12.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_12.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_12.prepareXlsxFile(fileName_tFileOutputExcel_12);
		
		xlsxTool_tFileOutputExcel_12.setFont("");
		
		if (xlsxTool_tFileOutputExcel_12.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_12.addRow();
		
		xlsxTool_tFileOutputExcel_12.addCellValue("patientid1");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("visit_date");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("chlamydia_result");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("gonorrhea_result");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("drug_description");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("drug_date");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("gpi");
		
		nb_line_tFileOutputExcel_12++; 
		
	}
		

 



/**
 * [tFileOutputExcel_12 begin ] stop
 */



	
	/**
	 * [tSortRow_7_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_7_SortIn", false);
		start_Hash.put("tSortRow_7_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortIn";

	
		int tos_count_tSortRow_7_SortIn = 0;
		
    	class BytesLimit65535_tSortRow_7_SortIn{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSortRow_7_SortIn().limitLog4jByte();


row43Struct[] array_tSortRow_7_SortIn = (row43Struct[]) globalMap.get("tSortRow_7");

int nb_line_tSortRow_7_SortIn = 0;

row43Struct current_tSortRow_7_SortIn = null;

for(int i_tSortRow_7_SortIn = 0; i_tSortRow_7_SortIn < array_tSortRow_7_SortIn.length; i_tSortRow_7_SortIn++){
	current_tSortRow_7_SortIn = array_tSortRow_7_SortIn[i_tSortRow_7_SortIn];
	row31.patientid1 = current_tSortRow_7_SortIn.patientid1;
	row31.visit_date = current_tSortRow_7_SortIn.visit_date;
	row31.chlamydia_result = current_tSortRow_7_SortIn.chlamydia_result;
	row31.gonorrhea_result = current_tSortRow_7_SortIn.gonorrhea_result;
	row31.drug_description = current_tSortRow_7_SortIn.drug_description;
	row31.drug_date = current_tSortRow_7_SortIn.drug_date;
	row31.gpi = current_tSortRow_7_SortIn.gpi;
	// increase number of line sorted
	nb_line_tSortRow_7_SortIn++;

 



/**
 * [tSortRow_7_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_7_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortIn";

	

 


	tos_count_tSortRow_7_SortIn++;

/**
 * [tSortRow_7_SortIn main ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

			//row31
			//row31


			
				if(execStat){
					runStat.updateStatOnConnection("row31"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(row31.patientid1 != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row31.patientid1));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row31.visit_date != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(row31.visit_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row31.chlamydia_result != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row31.chlamydia_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row31.gonorrhea_result != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row31.gonorrhea_result));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row31.drug_description != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row31.drug_description));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row31.drug_date != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(row31.drug_date, "MM/dd/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row31.gpi != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row31.gpi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */



	
	/**
	 * [tSortRow_7_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortIn";

	


}

globalMap.put("tSortRow_7_SortIn_NB_LINE",nb_line_tSortRow_7_SortIn);

 

ok_Hash.put("tSortRow_7_SortIn", true);
end_Hash.put("tSortRow_7_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_7_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

							columnIndex_tFileOutputExcel_12 = 0;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 1;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 2;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 3;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 4;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 5;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
							columnIndex_tFileOutputExcel_12 = 6;
						
					xlsxTool_tFileOutputExcel_12.setColAutoSize(columnIndex_tFileOutputExcel_12);
	
	
	
	
			xlsxTool_tFileOutputExcel_12.writeExcel(fileName_tFileOutputExcel_12,true);
	
		
			nb_line_tFileOutputExcel_12 = nb_line_tFileOutputExcel_12 -1;
		
		globalMap.put("tFileOutputExcel_12_NB_LINE",nb_line_tFileOutputExcel_12);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row31"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_12", true);
end_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());




/**
 * [tFileOutputExcel_12 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileInputExcel_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_7_SortIn"
							globalMap.remove("tSortRow_7");
						
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row42"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_14 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_14";

	

 



/**
 * [tFileInputExcel_14 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tUniqRow_8 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 finally ] stop
 */

	
	/**
	 * [tSortRow_7_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortOut";

	

 



/**
 * [tSortRow_7_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_7_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_7";
	
	currentComponent="tSortRow_7_SortIn";

	

 



/**
 * [tSortRow_7_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_14_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid == null) ? 0 : this.patientid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.patientid == null) {
							if (other.patientid != null)
								return false;
						
						} else if (!this.patientid.equals(other.patientid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.patientid = this.patientid;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.patientid = this.patientid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.drug_description = readString(dis,ois);
					
						this.drug_date = readDate(dis,ois);
					
						this.gpi = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.drug_description, dos, oos);
					
						writeDate(this.drug_date, dos, oos);
					
						writeString(this.gpi, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid, other.patientid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid;

				public String getPatientid () {
					return this.patientid;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid == null) ? 0 : this.patientid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.patientid == null) {
							if (other.patientid != null)
								return false;
						
						} else if (!this.patientid.equals(other.patientid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.patientid = this.patientid;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.patientid = this.patientid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid = readString(dis);
					
					this.drug_description = readString(dis);
					
					this.drug_date = readDate(dis);
					
					this.gpi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
					// java.util.Date
				
						writeDate(this.drug_date,dos);
					
					// String
				
						writeString(this.gpi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid="+patientid);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid, other.patientid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row7Struct row7 = new row7Struct();





	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row7 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row7().limitLog4jByte();

			   		// connection name:row7
			   		// source node:tFilterRow_2 - inputs:(row3) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row6,row7) outputs:(Indicator)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    	class BytesLimit65535_tFilterRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_2().limitLog4jByte();
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		
    	class BytesLimit65535_tFileInputExcel_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_2().limitLog4jByte();


			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = "C:/Users/MadhumithaRavi/Desktop/HBH/Input/Drug_data.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2){
   			sheetList_tFileInputExcel_2.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_2);
    	}
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 0;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row3 = null;
					int tempRowLength_tFileInputExcel_2 = 4;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "patientid";

				row3.patientid = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.patientid = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "drug_description";

				row3.drug_description = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.drug_description = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "drug_date";

				if(2<actual_end_column_tFileInputExcel_2){
					try{
						if(row_tFileInputExcel_2.getCell(columnIndex_tFileInputExcel_2+ start_column_tFileInputExcel_2).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_2.getCell(columnIndex_tFileInputExcel_2+ start_column_tFileInputExcel_2))){
							row3.drug_date = row_tFileInputExcel_2.getCell(columnIndex_tFileInputExcel_2+ start_column_tFileInputExcel_2).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_2 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_2.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_2.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_2+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_2 + " )");
                            }else{
                                row3.drug_date = tempDate_tFileInputExcel_2;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_2+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_2 + " )");
					}
				}

			}else{
				row3.drug_date = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "gpi";

				row3.gpi = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.gpi = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

          row7 = null;
          row7 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
      ope_tFilterRow_2.matches((// code sample : use row3 to define the condition.
// row3.columnName1.equals("foo") ||!(row3.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
!row3.drug_date.equals(".")
			), "advanced condition failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.patientid = row3.patientid;
               row7.drug_description = row3.drug_description;
               row7.drug_date = row3.drug_date;
               row7.gpi = row3.gpi;
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.patientid = row3.patientid;
               row7.drug_description = row3.drug_description;
               row7.drug_date = row3.drug_date;
               row7.gpi = row3.gpi;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.patientid = row7.patientid;
				
				row7_HashRow.drug_description = row7.drug_description;
				
				row7_HashRow.drug_date = row7.drug_date;
				
				row7_HashRow.gpi = row7.gpi;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */

} // End of branch "row7"





} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];

	
			    public String Drug_Names;

				public String getDrug_Names () {
					return this.Drug_Names;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.Drug_Names = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Drug_Names,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Drug_Names="+Drug_Names);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row16 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row16().limitLog4jByte();

			   		// connection name:row16
			   		// source node:tFileInputExcel_8 - inputs:(after_tFileInputExcel_7) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_4 - inputs:(row15,row16) outputs:(copyOfDrug_Indicator)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_8", false);
		start_Hash.put("tFileInputExcel_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_8";

	
		int tos_count_tFileInputExcel_8 = 0;
		
    	class BytesLimit65535_tFileInputExcel_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_8().limitLog4jByte();


			class RegexUtil_tFileInputExcel_8 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_8 regexUtil_tFileInputExcel_8 = new RegexUtil_tFileInputExcel_8();

		Object source_tFileInputExcel_8 = "C:/Users/MadhumithaRavi/Desktop/HBH/Input/Drug_lookup.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_8 = null;

		if(source_tFileInputExcel_8 instanceof String){
			workbook_tFileInputExcel_8 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_8);
		} else if(source_tFileInputExcel_8 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_8 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_8);
		} else{
			workbook_tFileInputExcel_8 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_8 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_8 : workbook_tFileInputExcel_8){
   			sheetList_tFileInputExcel_8.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_8);
    	}
    	if(sheetList_tFileInputExcel_8.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_8 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_8 : sheetList_tFileInputExcel_8) {
			if(sheet_FilterNull_tFileInputExcel_8!=null && sheetList_FilterNull_tFileInputExcel_8.iterator()!=null && sheet_FilterNull_tFileInputExcel_8.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_8.add(sheet_FilterNull_tFileInputExcel_8);
			}
		}
		sheetList_tFileInputExcel_8 = sheetList_FilterNull_tFileInputExcel_8;
	if(sheetList_tFileInputExcel_8.size()>0){
		int nb_line_tFileInputExcel_8 = 0;

        int begin_line_tFileInputExcel_8 = 0;

        int footer_input_tFileInputExcel_8 = 0;

        int end_line_tFileInputExcel_8=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_8:sheetList_tFileInputExcel_8){
			end_line_tFileInputExcel_8+=(sheet_tFileInputExcel_8.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_8 -= footer_input_tFileInputExcel_8;
        int limit_tFileInputExcel_8 = -1;
        int start_column_tFileInputExcel_8 = 1-1;
        int end_column_tFileInputExcel_8 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_8 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_8 = sheetList_tFileInputExcel_8.get(0);
        int rowCount_tFileInputExcel_8 = 0;
        int sheetIndex_tFileInputExcel_8 = 0;
        int currentRows_tFileInputExcel_8 = (sheetList_tFileInputExcel_8.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_8 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_8 = df_tFileInputExcel_8.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_8 = begin_line_tFileInputExcel_8; i_tFileInputExcel_8 < end_line_tFileInputExcel_8; i_tFileInputExcel_8++){

        	int emptyColumnCount_tFileInputExcel_8 = 0;

        	if (limit_tFileInputExcel_8 != -1 && nb_line_tFileInputExcel_8 >= limit_tFileInputExcel_8) {
        		break;
        	}

            while (i_tFileInputExcel_8 >= rowCount_tFileInputExcel_8 + currentRows_tFileInputExcel_8) {
                rowCount_tFileInputExcel_8 += currentRows_tFileInputExcel_8;
                sheet_tFileInputExcel_8 = sheetList_tFileInputExcel_8.get(++sheetIndex_tFileInputExcel_8);
                currentRows_tFileInputExcel_8 = (sheet_tFileInputExcel_8.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_8_CURRENT_SHEET",sheet_tFileInputExcel_8.getSheetName());
            if (rowCount_tFileInputExcel_8 <= i_tFileInputExcel_8) {
                row_tFileInputExcel_8 = sheet_tFileInputExcel_8.getRow(i_tFileInputExcel_8 - rowCount_tFileInputExcel_8);
            }
		    row16 = null;
		    row16 = null;
					int tempRowLength_tFileInputExcel_8 = 1;
				
				int columnIndex_tFileInputExcel_8 = 0;
			
			String[] temp_row_tFileInputExcel_8 = new String[tempRowLength_tFileInputExcel_8];
			int excel_end_column_tFileInputExcel_8;
			if(row_tFileInputExcel_8==null){
				excel_end_column_tFileInputExcel_8=0;
			}else{
				excel_end_column_tFileInputExcel_8=row_tFileInputExcel_8.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_8;
			if(end_column_tFileInputExcel_8 == -1){
				actual_end_column_tFileInputExcel_8 = excel_end_column_tFileInputExcel_8;
			}
			else{
				actual_end_column_tFileInputExcel_8 = end_column_tFileInputExcel_8 >	excel_end_column_tFileInputExcel_8 ? excel_end_column_tFileInputExcel_8 : end_column_tFileInputExcel_8;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_8 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_8;i++){
				if(i + start_column_tFileInputExcel_8 < actual_end_column_tFileInputExcel_8){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_8 = row_tFileInputExcel_8.getCell(i + start_column_tFileInputExcel_8);
					if(cell_tFileInputExcel_8!=null){
					switch (cell_tFileInputExcel_8.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_8[i] = cell_tFileInputExcel_8.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_8)) {
									temp_row_tFileInputExcel_8[i] =cell_tFileInputExcel_8.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_8[i] = df_tFileInputExcel_8.format(cell_tFileInputExcel_8.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_8[i] =String.valueOf(cell_tFileInputExcel_8.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_8.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_8[i] = cell_tFileInputExcel_8.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_8)) {
											temp_row_tFileInputExcel_8[i] =cell_tFileInputExcel_8.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_8 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_8.getNumericCellValue());
										temp_row_tFileInputExcel_8[i] = ne_tFileInputExcel_8.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_8[i] =String.valueOf(cell_tFileInputExcel_8.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_8[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_8[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_8[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_8[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_8 = false;
			row16 = new row16Struct();
			int curColNum_tFileInputExcel_8 = -1;
			String curColName_tFileInputExcel_8 = "";
			try{
							columnIndex_tFileInputExcel_8 = 0;
						
			if( temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
				curColNum_tFileInputExcel_8=columnIndex_tFileInputExcel_8 + start_column_tFileInputExcel_8 + 1;
				curColName_tFileInputExcel_8 = "Drug_Names";

				row16.Drug_Names = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8];
			}else{
				row16.Drug_Names = null;
				emptyColumnCount_tFileInputExcel_8++;
			}

				nb_line_tFileInputExcel_8++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_8 = true;
					 System.err.println(e.getMessage());
					 row16 = null;
			}


		



 



/**
 * [tFileInputExcel_8 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_8";

	

 


	tos_count_tFileInputExcel_8++;

/**
 * [tFileInputExcel_8 main ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.Drug_Names = row16.Drug_Names;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFileInputExcel_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_8";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_8_NB_LINE",nb_line_tFileInputExcel_8);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_8 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_8.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_8", true);
end_Hash.put("tFileInputExcel_8", System.currentTimeMillis());




/**
 * [tFileInputExcel_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_8";

	

 



/**
 * [tFileInputExcel_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_8_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableComparableLookupRow<row42Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String patientid1;

				public String getPatientid1 () {
					return this.patientid1;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public String chlamydia_result;

				public String getChlamydia_result () {
					return this.chlamydia_result;
				}
				
			    public String gonorrhea_result;

				public String getGonorrhea_result () {
					return this.gonorrhea_result;
				}
				
			    public String drug_description;

				public String getDrug_description () {
					return this.drug_description;
				}
				
			    public java.util.Date drug_date;

				public java.util.Date getDrug_date () {
					return this.drug_date;
				}
				
			    public String gpi;

				public String getGpi () {
					return this.gpi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.patientid1 == null) ? 0 : this.patientid1.hashCode());
					
						result = prime * result + ((this.visit_date == null) ? 0 : this.visit_date.hashCode());
					
						result = prime * result + ((this.drug_description == null) ? 0 : this.drug_description.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row42Struct other = (row42Struct) obj;
		
						if (this.patientid1 == null) {
							if (other.patientid1 != null)
								return false;
						
						} else if (!this.patientid1.equals(other.patientid1))
						
							return false;
					
						if (this.visit_date == null) {
							if (other.visit_date != null)
								return false;
						
						} else if (!this.visit_date.equals(other.visit_date))
						
							return false;
					
						if (this.drug_description == null) {
							if (other.drug_description != null)
								return false;
						
						} else if (!this.drug_description.equals(other.drug_description))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row42Struct other) {

		other.patientid1 = this.patientid1;
	            other.visit_date = this.visit_date;
	            other.chlamydia_result = this.chlamydia_result;
	            other.gonorrhea_result = this.gonorrhea_result;
	            other.drug_description = this.drug_description;
	            other.drug_date = this.drug_date;
	            other.gpi = this.gpi;
	            
	}

	public void copyKeysDataTo(row42Struct other) {

		other.patientid1 = this.patientid1;
	            	other.visit_date = this.visit_date;
	            	other.drug_description = this.drug_description;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HBH_Indicator.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HBH_Indicator.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HBH_Indicator = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HBH_Indicator, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HBH_Indicator) {

        	try {

        		int length = 0;
		
					this.patientid1 = readString(dis);
					
					this.visit_date = readDate(dis);
					
					this.drug_description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.patientid1,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// String
				
						writeString(this.drug_description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.chlamydia_result = readString(dis,ois);
					
						this.gonorrhea_result = readString(dis,ois);
					
						this.drug_date = readDate(dis,ois);
					
						this.gpi = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.chlamydia_result, dos, oos);
					
						writeString(this.gonorrhea_result, dos, oos);
					
						writeDate(this.drug_date, dos, oos);
					
						writeString(this.gpi, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patientid1="+patientid1);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",chlamydia_result="+chlamydia_result);
		sb.append(",gonorrhea_result="+gonorrhea_result);
		sb.append(",drug_description="+drug_description);
		sb.append(",drug_date="+String.valueOf(drug_date));
		sb.append(",gpi="+gpi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patientid1, other.patientid1);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.visit_date, other.visit_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.drug_description, other.drug_description);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tAdvancedHash_row42 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row42", false);
		start_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row42";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row42" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row42 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row42{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row42().limitLog4jByte();

			   		// connection name:row42
			   		// source node:tFileInputExcel_15 - inputs:(after_tFileInputExcel_14) outputs:(row42,row42) | target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
			   		// linked node: tMap_6 - inputs:(row41,row42) outputs:(copyOfcopyOfDrug_Indicator_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row42Struct>getLookup(matchingModeEnum_row42);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row42 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_15", false);
		start_Hash.put("tFileInputExcel_15", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_15";

	
		int tos_count_tFileInputExcel_15 = 0;
		
    	class BytesLimit65535_tFileInputExcel_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_15().limitLog4jByte();


			class RegexUtil_tFileInputExcel_15 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_15 regexUtil_tFileInputExcel_15 = new RegexUtil_tFileInputExcel_15();

		Object source_tFileInputExcel_15 = "C:/Users/MadhumithaRavi/Desktop/HBH/Temp/Lookup_Drugs_Present_Indicator.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_15 = null;

		if(source_tFileInputExcel_15 instanceof String){
			workbook_tFileInputExcel_15 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_15);
		} else if(source_tFileInputExcel_15 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_15 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_15);
		} else{
			workbook_tFileInputExcel_15 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_15 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_15 : workbook_tFileInputExcel_15){
   			sheetList_tFileInputExcel_15.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_15);
    	}
    	if(sheetList_tFileInputExcel_15.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_15 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_15 : sheetList_tFileInputExcel_15) {
			if(sheet_FilterNull_tFileInputExcel_15!=null && sheetList_FilterNull_tFileInputExcel_15.iterator()!=null && sheet_FilterNull_tFileInputExcel_15.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_15.add(sheet_FilterNull_tFileInputExcel_15);
			}
		}
		sheetList_tFileInputExcel_15 = sheetList_FilterNull_tFileInputExcel_15;
	if(sheetList_tFileInputExcel_15.size()>0){
		int nb_line_tFileInputExcel_15 = 0;

        int begin_line_tFileInputExcel_15 = 0;

        int footer_input_tFileInputExcel_15 = 0;

        int end_line_tFileInputExcel_15=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_15:sheetList_tFileInputExcel_15){
			end_line_tFileInputExcel_15+=(sheet_tFileInputExcel_15.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_15 -= footer_input_tFileInputExcel_15;
        int limit_tFileInputExcel_15 = -1;
        int start_column_tFileInputExcel_15 = 1-1;
        int end_column_tFileInputExcel_15 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_15 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_15 = sheetList_tFileInputExcel_15.get(0);
        int rowCount_tFileInputExcel_15 = 0;
        int sheetIndex_tFileInputExcel_15 = 0;
        int currentRows_tFileInputExcel_15 = (sheetList_tFileInputExcel_15.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_15 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_15 = df_tFileInputExcel_15.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_15 = begin_line_tFileInputExcel_15; i_tFileInputExcel_15 < end_line_tFileInputExcel_15; i_tFileInputExcel_15++){

        	int emptyColumnCount_tFileInputExcel_15 = 0;

        	if (limit_tFileInputExcel_15 != -1 && nb_line_tFileInputExcel_15 >= limit_tFileInputExcel_15) {
        		break;
        	}

            while (i_tFileInputExcel_15 >= rowCount_tFileInputExcel_15 + currentRows_tFileInputExcel_15) {
                rowCount_tFileInputExcel_15 += currentRows_tFileInputExcel_15;
                sheet_tFileInputExcel_15 = sheetList_tFileInputExcel_15.get(++sheetIndex_tFileInputExcel_15);
                currentRows_tFileInputExcel_15 = (sheet_tFileInputExcel_15.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_15_CURRENT_SHEET",sheet_tFileInputExcel_15.getSheetName());
            if (rowCount_tFileInputExcel_15 <= i_tFileInputExcel_15) {
                row_tFileInputExcel_15 = sheet_tFileInputExcel_15.getRow(i_tFileInputExcel_15 - rowCount_tFileInputExcel_15);
            }
		    row42 = null;
		    row42 = null;
					int tempRowLength_tFileInputExcel_15 = 7;
				
				int columnIndex_tFileInputExcel_15 = 0;
			
			String[] temp_row_tFileInputExcel_15 = new String[tempRowLength_tFileInputExcel_15];
			int excel_end_column_tFileInputExcel_15;
			if(row_tFileInputExcel_15==null){
				excel_end_column_tFileInputExcel_15=0;
			}else{
				excel_end_column_tFileInputExcel_15=row_tFileInputExcel_15.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_15;
			if(end_column_tFileInputExcel_15 == -1){
				actual_end_column_tFileInputExcel_15 = excel_end_column_tFileInputExcel_15;
			}
			else{
				actual_end_column_tFileInputExcel_15 = end_column_tFileInputExcel_15 >	excel_end_column_tFileInputExcel_15 ? excel_end_column_tFileInputExcel_15 : end_column_tFileInputExcel_15;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_15 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_15;i++){
				if(i + start_column_tFileInputExcel_15 < actual_end_column_tFileInputExcel_15){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_15 = row_tFileInputExcel_15.getCell(i + start_column_tFileInputExcel_15);
					if(cell_tFileInputExcel_15!=null){
					switch (cell_tFileInputExcel_15.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_15[i] = cell_tFileInputExcel_15.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_15)) {
									temp_row_tFileInputExcel_15[i] =cell_tFileInputExcel_15.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_15[i] = df_tFileInputExcel_15.format(cell_tFileInputExcel_15.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_15[i] =String.valueOf(cell_tFileInputExcel_15.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_15.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_15[i] = cell_tFileInputExcel_15.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_15)) {
											temp_row_tFileInputExcel_15[i] =cell_tFileInputExcel_15.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_15 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_15.getNumericCellValue());
										temp_row_tFileInputExcel_15[i] = ne_tFileInputExcel_15.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_15[i] =String.valueOf(cell_tFileInputExcel_15.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_15[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_15[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_15[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_15[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_15 = false;
			row42 = new row42Struct();
			int curColNum_tFileInputExcel_15 = -1;
			String curColName_tFileInputExcel_15 = "";
			try{
							columnIndex_tFileInputExcel_15 = 0;
						
			if( temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
				curColNum_tFileInputExcel_15=columnIndex_tFileInputExcel_15 + start_column_tFileInputExcel_15 + 1;
				curColName_tFileInputExcel_15 = "patientid1";

				row42.patientid1 = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
			}else{
				row42.patientid1 = null;
				emptyColumnCount_tFileInputExcel_15++;
			}
							columnIndex_tFileInputExcel_15 = 1;
						
			if( temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
				curColNum_tFileInputExcel_15=columnIndex_tFileInputExcel_15 + start_column_tFileInputExcel_15 + 1;
				curColName_tFileInputExcel_15 = "visit_date";

				if(1<actual_end_column_tFileInputExcel_15){
					try{
						if(row_tFileInputExcel_15.getCell(columnIndex_tFileInputExcel_15+ start_column_tFileInputExcel_15).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_15.getCell(columnIndex_tFileInputExcel_15+ start_column_tFileInputExcel_15))){
							row42.visit_date = row_tFileInputExcel_15.getCell(columnIndex_tFileInputExcel_15+ start_column_tFileInputExcel_15).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_15 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_15.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_15.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_15+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_15 + " )");
                            }else{
                                row42.visit_date = tempDate_tFileInputExcel_15;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_15+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_15 + " )");
					}
				}

			}else{
				row42.visit_date = null;
				emptyColumnCount_tFileInputExcel_15++;
			}
							columnIndex_tFileInputExcel_15 = 2;
						
			if( temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
				curColNum_tFileInputExcel_15=columnIndex_tFileInputExcel_15 + start_column_tFileInputExcel_15 + 1;
				curColName_tFileInputExcel_15 = "chlamydia_result";

				row42.chlamydia_result = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
			}else{
				row42.chlamydia_result = null;
				emptyColumnCount_tFileInputExcel_15++;
			}
							columnIndex_tFileInputExcel_15 = 3;
						
			if( temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
				curColNum_tFileInputExcel_15=columnIndex_tFileInputExcel_15 + start_column_tFileInputExcel_15 + 1;
				curColName_tFileInputExcel_15 = "gonorrhea_result";

				row42.gonorrhea_result = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
			}else{
				row42.gonorrhea_result = null;
				emptyColumnCount_tFileInputExcel_15++;
			}
							columnIndex_tFileInputExcel_15 = 4;
						
			if( temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
				curColNum_tFileInputExcel_15=columnIndex_tFileInputExcel_15 + start_column_tFileInputExcel_15 + 1;
				curColName_tFileInputExcel_15 = "drug_description";

				row42.drug_description = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
			}else{
				row42.drug_description = null;
				emptyColumnCount_tFileInputExcel_15++;
			}
							columnIndex_tFileInputExcel_15 = 5;
						
			if( temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
				curColNum_tFileInputExcel_15=columnIndex_tFileInputExcel_15 + start_column_tFileInputExcel_15 + 1;
				curColName_tFileInputExcel_15 = "drug_date";

				if(5<actual_end_column_tFileInputExcel_15){
					try{
						if(row_tFileInputExcel_15.getCell(columnIndex_tFileInputExcel_15+ start_column_tFileInputExcel_15).getCellType() == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC && org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(row_tFileInputExcel_15.getCell(columnIndex_tFileInputExcel_15+ start_column_tFileInputExcel_15))){
							row42.drug_date = row_tFileInputExcel_15.getCell(columnIndex_tFileInputExcel_15+ start_column_tFileInputExcel_15).getDateCellValue();
						}
						else{
                            java.util.Date tempDate_tFileInputExcel_15 = ParserUtils.parseTo_Date(temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15], "MM/dd/yyyy");
                            if(tempDate_tFileInputExcel_15.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS")).parse("9999/12/31 23:59:59.999"))||tempDate_tFileInputExcel_15.before((new SimpleDateFormat("yyyy/MM/dd")).parse("1900/01/01"))){
                                throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_15+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_15 + " )");
                            }else{
                                row42.drug_date = tempDate_tFileInputExcel_15;
                            }
						}
					}catch(java.lang.Exception e){
						
						throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_15+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_15 + " )");
					}
				}

			}else{
				row42.drug_date = null;
				emptyColumnCount_tFileInputExcel_15++;
			}
							columnIndex_tFileInputExcel_15 = 6;
						
			if( temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
				curColNum_tFileInputExcel_15=columnIndex_tFileInputExcel_15 + start_column_tFileInputExcel_15 + 1;
				curColName_tFileInputExcel_15 = "gpi";

				row42.gpi = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
			}else{
				row42.gpi = null;
				emptyColumnCount_tFileInputExcel_15++;
			}

				nb_line_tFileInputExcel_15++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_15 = true;
					 System.err.println(e.getMessage());
					 row42 = null;
			}


		



 



/**
 * [tFileInputExcel_15 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_15 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_15";

	

 


	tos_count_tFileInputExcel_15++;

/**
 * [tFileInputExcel_15 main ] stop
 */
// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tAdvancedHash_row42 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

			//row42
			//row42


			
				if(execStat){
					runStat.updateStatOnConnection("row42"+iterateId,1, 1);
				} 
			

		


			   
			   

					row42Struct row42_HashRow = new row42Struct();
		   	   	   
				
				row42_HashRow.patientid1 = row42.patientid1;
				
				row42_HashRow.visit_date = row42.visit_date;
				
				row42_HashRow.chlamydia_result = row42.chlamydia_result;
				
				row42_HashRow.gonorrhea_result = row42.gonorrhea_result;
				
				row42_HashRow.drug_description = row42.drug_description;
				
				row42_HashRow.drug_date = row42.drug_date;
				
				row42_HashRow.gpi = row42.gpi;
				
			tHash_Lookup_row42.put(row42_HashRow);
			
            




 


	tos_count_tAdvancedHash_row42++;

/**
 * [tAdvancedHash_row42 main ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tFileInputExcel_15 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_15";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_15_NB_LINE",nb_line_tFileInputExcel_15);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_15 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_15.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_15", true);
end_Hash.put("tFileInputExcel_15", System.currentTimeMillis());




/**
 * [tFileInputExcel_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

tHash_Lookup_row42.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row42"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row42", true);
end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());




/**
 * [tAdvancedHash_row42 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_15 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_15";

	

 



/**
 * [tFileInputExcel_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_15_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final HBH_Indicator HBH_IndicatorClass = new HBH_Indicator();

        int exitCode = HBH_IndicatorClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HBH_Indicator.class.getClassLoader().getResourceAsStream("local_project/hbh_indicator_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HBH_Indicator");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     810746 characters generated by Talend Open Studio for Data Integration 
 *     on the November 6, 2017 7:47:04 PM CST
 ************************************************************************************************/